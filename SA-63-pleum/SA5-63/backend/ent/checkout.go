// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/chanudomsr/app/ent/customer"
	"github.com/chanudomsr/app/ent/employee"
	"github.com/chanudomsr/app/ent/room"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Checkout is the model entity for the Checkout schema.
type Checkout struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CHECKOUTDATE holds the value of the "CHECKOUTDATE" field.
	CHECKOUTDATE time.Time `json:"CHECKOUTDATE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckoutQuery when eager-loading is set.
	Edges              CheckoutEdges `json:"edges"`
	books_checkout1    *int
	customer_checkout2 *int
	employee_checkout3 *int
	room_checkout4     *int
}

// CheckoutEdges holds the relations/edges for other nodes in the graph.
type CheckoutEdges struct {
	// Books holds the value of the books edge.
	Books *Books
	// Customer holds the value of the customer edge.
	Customer *Customer
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Room holds the value of the room edge.
	Room *Room
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) BooksOrErr() (*Books, error) {
	if e.loadedTypes[0] {
		if e.Books == nil {
			// The edge books was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: books.Label}
		}
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[2] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[3] {
		if e.Room == nil {
			// The edge room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Checkout) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // CHECKOUTDATE
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Checkout) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // books_checkout1
		&sql.NullInt64{}, // customer_checkout2
		&sql.NullInt64{}, // employee_checkout3
		&sql.NullInt64{}, // room_checkout4
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Checkout fields.
func (c *Checkout) assignValues(values ...interface{}) error {
	if m, n := len(values), len(checkout.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field CHECKOUTDATE", values[0])
	} else if value.Valid {
		c.CHECKOUTDATE = value.Time
	}
	values = values[1:]
	if len(values) == len(checkout.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field books_checkout1", value)
		} else if value.Valid {
			c.books_checkout1 = new(int)
			*c.books_checkout1 = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_checkout2", value)
		} else if value.Valid {
			c.customer_checkout2 = new(int)
			*c.customer_checkout2 = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_checkout3", value)
		} else if value.Valid {
			c.employee_checkout3 = new(int)
			*c.employee_checkout3 = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_checkout4", value)
		} else if value.Valid {
			c.room_checkout4 = new(int)
			*c.room_checkout4 = int(value.Int64)
		}
	}
	return nil
}

// QueryBooks queries the books edge of the Checkout.
func (c *Checkout) QueryBooks() *BooksQuery {
	return (&CheckoutClient{config: c.config}).QueryBooks(c)
}

// QueryCustomer queries the customer edge of the Checkout.
func (c *Checkout) QueryCustomer() *CustomerQuery {
	return (&CheckoutClient{config: c.config}).QueryCustomer(c)
}

// QueryEmployee queries the employee edge of the Checkout.
func (c *Checkout) QueryEmployee() *EmployeeQuery {
	return (&CheckoutClient{config: c.config}).QueryEmployee(c)
}

// QueryRoom queries the room edge of the Checkout.
func (c *Checkout) QueryRoom() *RoomQuery {
	return (&CheckoutClient{config: c.config}).QueryRoom(c)
}

// Update returns a builder for updating this Checkout.
// Note that, you need to call Checkout.Unwrap() before calling this method, if this Checkout
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Checkout) Update() *CheckoutUpdateOne {
	return (&CheckoutClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Checkout) Unwrap() *Checkout {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Checkout is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Checkout) String() string {
	var builder strings.Builder
	builder.WriteString("Checkout(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", CHECKOUTDATE=")
	builder.WriteString(c.CHECKOUTDATE.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Checkouts is a parsable slice of Checkout.
type Checkouts []*Checkout

func (c Checkouts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
