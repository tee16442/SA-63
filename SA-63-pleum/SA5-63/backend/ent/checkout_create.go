// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/chanudomsr/app/ent/customer"
	"github.com/chanudomsr/app/ent/employee"
	"github.com/chanudomsr/app/ent/room"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CheckoutCreate is the builder for creating a Checkout entity.
type CheckoutCreate struct {
	config
	mutation *CheckoutMutation
	hooks    []Hook
}

// SetCHECKOUTDATE sets the CHECKOUTDATE field.
func (cc *CheckoutCreate) SetCHECKOUTDATE(t time.Time) *CheckoutCreate {
	cc.mutation.SetCHECKOUTDATE(t)
	return cc
}

// SetBooksID sets the books edge to Books by id.
func (cc *CheckoutCreate) SetBooksID(id int) *CheckoutCreate {
	cc.mutation.SetBooksID(id)
	return cc
}

// SetNillableBooksID sets the books edge to Books by id if the given value is not nil.
func (cc *CheckoutCreate) SetNillableBooksID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetBooksID(*id)
	}
	return cc
}

// SetBooks sets the books edge to Books.
func (cc *CheckoutCreate) SetBooks(b *Books) *CheckoutCreate {
	return cc.SetBooksID(b.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (cc *CheckoutCreate) SetCustomerID(id int) *CheckoutCreate {
	cc.mutation.SetCustomerID(id)
	return cc
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (cc *CheckoutCreate) SetNillableCustomerID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetCustomerID(*id)
	}
	return cc
}

// SetCustomer sets the customer edge to Customer.
func (cc *CheckoutCreate) SetCustomer(c *Customer) *CheckoutCreate {
	return cc.SetCustomerID(c.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (cc *CheckoutCreate) SetEmployeeID(id int) *CheckoutCreate {
	cc.mutation.SetEmployeeID(id)
	return cc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (cc *CheckoutCreate) SetNillableEmployeeID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetEmployeeID(*id)
	}
	return cc
}

// SetEmployee sets the employee edge to Employee.
func (cc *CheckoutCreate) SetEmployee(e *Employee) *CheckoutCreate {
	return cc.SetEmployeeID(e.ID)
}

// SetRoomID sets the room edge to Room by id.
func (cc *CheckoutCreate) SetRoomID(id int) *CheckoutCreate {
	cc.mutation.SetRoomID(id)
	return cc
}

// SetNillableRoomID sets the room edge to Room by id if the given value is not nil.
func (cc *CheckoutCreate) SetNillableRoomID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetRoomID(*id)
	}
	return cc
}

// SetRoom sets the room edge to Room.
func (cc *CheckoutCreate) SetRoom(r *Room) *CheckoutCreate {
	return cc.SetRoomID(r.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cc *CheckoutCreate) Mutation() *CheckoutMutation {
	return cc.mutation
}

// Save creates the Checkout in the database.
func (cc *CheckoutCreate) Save(ctx context.Context) (*Checkout, error) {
	if _, ok := cc.mutation.CHECKOUTDATE(); !ok {
		return nil, &ValidationError{Name: "CHECKOUTDATE", err: errors.New("ent: missing required field \"CHECKOUTDATE\"")}
	}
	var (
		err  error
		node *Checkout
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CheckoutCreate) SaveX(ctx context.Context) *Checkout {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CheckoutCreate) sqlSave(ctx context.Context) (*Checkout, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CheckoutCreate) createSpec() (*Checkout, *sqlgraph.CreateSpec) {
	var (
		c     = &Checkout{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkout.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkout.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CHECKOUTDATE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldCHECKOUTDATE,
		})
		c.CHECKOUTDATE = value
	}
	if nodes := cc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.BooksTable,
			Columns: []string{checkout.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CustomerTable,
			Columns: []string{checkout.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.EmployeeTable,
			Columns: []string{checkout.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.RoomTable,
			Columns: []string{checkout.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
