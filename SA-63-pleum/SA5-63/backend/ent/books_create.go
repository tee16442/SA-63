// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BooksCreate is the builder for creating a Books entity.
type BooksCreate struct {
	config
	mutation *BooksMutation
	hooks    []Hook
}

// SetCHECKINDATE sets the CHECKINDATE field.
func (bc *BooksCreate) SetCHECKINDATE(s string) *BooksCreate {
	bc.mutation.SetCHECKINDATE(s)
	return bc
}

// SetCheckout1ID sets the checkout1 edge to Checkout by id.
func (bc *BooksCreate) SetCheckout1ID(id int) *BooksCreate {
	bc.mutation.SetCheckout1ID(id)
	return bc
}

// SetNillableCheckout1ID sets the checkout1 edge to Checkout by id if the given value is not nil.
func (bc *BooksCreate) SetNillableCheckout1ID(id *int) *BooksCreate {
	if id != nil {
		bc = bc.SetCheckout1ID(*id)
	}
	return bc
}

// SetCheckout1 sets the checkout1 edge to Checkout.
func (bc *BooksCreate) SetCheckout1(c *Checkout) *BooksCreate {
	return bc.SetCheckout1ID(c.ID)
}

// Mutation returns the BooksMutation object of the builder.
func (bc *BooksCreate) Mutation() *BooksMutation {
	return bc.mutation
}

// Save creates the Books in the database.
func (bc *BooksCreate) Save(ctx context.Context) (*Books, error) {
	if _, ok := bc.mutation.CHECKINDATE(); !ok {
		return nil, &ValidationError{Name: "CHECKINDATE", err: errors.New("ent: missing required field \"CHECKINDATE\"")}
	}
	var (
		err  error
		node *Books
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BooksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BooksCreate) SaveX(ctx context.Context) *Books {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BooksCreate) sqlSave(ctx context.Context) (*Books, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BooksCreate) createSpec() (*Books, *sqlgraph.CreateSpec) {
	var (
		b     = &Books{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: books.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: books.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.CHECKINDATE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: books.FieldCHECKINDATE,
		})
		b.CHECKINDATE = value
	}
	if nodes := bc.mutation.Checkout1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   books.Checkout1Table,
			Columns: []string{books.Checkout1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
