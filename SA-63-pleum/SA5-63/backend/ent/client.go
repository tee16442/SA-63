// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/chanudomsr/app/ent/migrate"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/chanudomsr/app/ent/customer"
	"github.com/chanudomsr/app/ent/employee"
	"github.com/chanudomsr/app/ent/room"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Books is the client for interacting with the Books builders.
	Books *BooksClient
	// Checkout is the client for interacting with the Checkout builders.
	Checkout *CheckoutClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Books = NewBooksClient(c.config)
	c.Checkout = NewCheckoutClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Room = NewRoomClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Books:    NewBooksClient(cfg),
		Checkout: NewCheckoutClient(cfg),
		Customer: NewCustomerClient(cfg),
		Employee: NewEmployeeClient(cfg),
		Room:     NewRoomClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:   cfg,
		Books:    NewBooksClient(cfg),
		Checkout: NewCheckoutClient(cfg),
		Customer: NewCustomerClient(cfg),
		Employee: NewEmployeeClient(cfg),
		Room:     NewRoomClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Books.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Books.Use(hooks...)
	c.Checkout.Use(hooks...)
	c.Customer.Use(hooks...)
	c.Employee.Use(hooks...)
	c.Room.Use(hooks...)
}

// BooksClient is a client for the Books schema.
type BooksClient struct {
	config
}

// NewBooksClient returns a client for the Books from the given config.
func NewBooksClient(c config) *BooksClient {
	return &BooksClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `books.Hooks(f(g(h())))`.
func (c *BooksClient) Use(hooks ...Hook) {
	c.hooks.Books = append(c.hooks.Books, hooks...)
}

// Create returns a create builder for Books.
func (c *BooksClient) Create() *BooksCreate {
	mutation := newBooksMutation(c.config, OpCreate)
	return &BooksCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Books.
func (c *BooksClient) Update() *BooksUpdate {
	mutation := newBooksMutation(c.config, OpUpdate)
	return &BooksUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BooksClient) UpdateOne(b *Books) *BooksUpdateOne {
	mutation := newBooksMutation(c.config, OpUpdateOne, withBooks(b))
	return &BooksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BooksClient) UpdateOneID(id int) *BooksUpdateOne {
	mutation := newBooksMutation(c.config, OpUpdateOne, withBooksID(id))
	return &BooksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Books.
func (c *BooksClient) Delete() *BooksDelete {
	mutation := newBooksMutation(c.config, OpDelete)
	return &BooksDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BooksClient) DeleteOne(b *Books) *BooksDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BooksClient) DeleteOneID(id int) *BooksDeleteOne {
	builder := c.Delete().Where(books.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BooksDeleteOne{builder}
}

// Create returns a query builder for Books.
func (c *BooksClient) Query() *BooksQuery {
	return &BooksQuery{config: c.config}
}

// Get returns a Books entity by its id.
func (c *BooksClient) Get(ctx context.Context, id int) (*Books, error) {
	return c.Query().Where(books.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BooksClient) GetX(ctx context.Context, id int) *Books {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryCheckout1 queries the checkout1 edge of a Books.
func (c *BooksClient) QueryCheckout1(b *Books) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(books.Table, books.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, books.Checkout1Table, books.Checkout1Column),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BooksClient) Hooks() []Hook {
	return c.hooks.Books
}

// CheckoutClient is a client for the Checkout schema.
type CheckoutClient struct {
	config
}

// NewCheckoutClient returns a client for the Checkout from the given config.
func NewCheckoutClient(c config) *CheckoutClient {
	return &CheckoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checkout.Hooks(f(g(h())))`.
func (c *CheckoutClient) Use(hooks ...Hook) {
	c.hooks.Checkout = append(c.hooks.Checkout, hooks...)
}

// Create returns a create builder for Checkout.
func (c *CheckoutClient) Create() *CheckoutCreate {
	mutation := newCheckoutMutation(c.config, OpCreate)
	return &CheckoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Checkout.
func (c *CheckoutClient) Update() *CheckoutUpdate {
	mutation := newCheckoutMutation(c.config, OpUpdate)
	return &CheckoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckoutClient) UpdateOne(ch *Checkout) *CheckoutUpdateOne {
	mutation := newCheckoutMutation(c.config, OpUpdateOne, withCheckout(ch))
	return &CheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckoutClient) UpdateOneID(id int) *CheckoutUpdateOne {
	mutation := newCheckoutMutation(c.config, OpUpdateOne, withCheckoutID(id))
	return &CheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Checkout.
func (c *CheckoutClient) Delete() *CheckoutDelete {
	mutation := newCheckoutMutation(c.config, OpDelete)
	return &CheckoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckoutClient) DeleteOne(ch *Checkout) *CheckoutDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckoutClient) DeleteOneID(id int) *CheckoutDeleteOne {
	builder := c.Delete().Where(checkout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckoutDeleteOne{builder}
}

// Create returns a query builder for Checkout.
func (c *CheckoutClient) Query() *CheckoutQuery {
	return &CheckoutQuery{config: c.config}
}

// Get returns a Checkout entity by its id.
func (c *CheckoutClient) Get(ctx context.Context, id int) (*Checkout, error) {
	return c.Query().Where(checkout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckoutClient) GetX(ctx context.Context, id int) *Checkout {
	ch, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ch
}

// QueryBooks queries the books edge of a Checkout.
func (c *CheckoutClient) QueryBooks(ch *Checkout) *BooksQuery {
	query := &BooksQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(books.Table, books.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, checkout.BooksTable, checkout.BooksColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a Checkout.
func (c *CheckoutClient) QueryCustomer(ch *Checkout) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkout.CustomerTable, checkout.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Checkout.
func (c *CheckoutClient) QueryEmployee(ch *Checkout) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkout.EmployeeTable, checkout.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a Checkout.
func (c *CheckoutClient) QueryRoom(ch *Checkout) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, checkout.RoomTable, checkout.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckoutClient) Hooks() []Hook {
	return c.hooks.Checkout
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Create returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{config: c.config}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	cu, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cu
}

// QueryCheckout2 queries the checkout2 edge of a Customer.
func (c *CustomerClient) QueryCheckout2(cu *Customer) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.Checkout2Table, customer.Checkout2Column),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryCheckout3 queries the checkout3 edge of a Employee.
func (c *EmployeeClient) QueryCheckout3(e *Employee) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.Checkout3Table, employee.Checkout3Column),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryCheckout4 queries the checkout4 edge of a Room.
func (c *RoomClient) QueryCheckout4(r *Room) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, room.Checkout4Table, room.Checkout4Column),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}
