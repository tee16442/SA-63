// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/chanudomsr/app/ent/customer"
	"github.com/chanudomsr/app/ent/employee"
	"github.com/chanudomsr/app/ent/room"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBooks    = "Books"
	TypeCheckout = "Checkout"
	TypeCustomer = "Customer"
	TypeEmployee = "Employee"
	TypeRoom     = "Room"
)

// BooksMutation represents an operation that mutate the BooksSlice
// nodes in the graph.
type BooksMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_CHECKINDATE     *string
	clearedFields    map[string]struct{}
	checkout1        *int
	clearedcheckout1 bool
	done             bool
	oldValue         func(context.Context) (*Books, error)
}

var _ ent.Mutation = (*BooksMutation)(nil)

// booksOption allows to manage the mutation configuration using functional options.
type booksOption func(*BooksMutation)

// newBooksMutation creates new mutation for $n.Name.
func newBooksMutation(c config, op Op, opts ...booksOption) *BooksMutation {
	m := &BooksMutation{
		config:        c,
		op:            op,
		typ:           TypeBooks,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBooksID sets the id field of the mutation.
func withBooksID(id int) booksOption {
	return func(m *BooksMutation) {
		var (
			err   error
			once  sync.Once
			value *Books
		)
		m.oldValue = func(ctx context.Context) (*Books, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Books.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBooks sets the old Books of the mutation.
func withBooks(node *Books) booksOption {
	return func(m *BooksMutation) {
		m.oldValue = func(context.Context) (*Books, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BooksMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BooksMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BooksMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCHECKINDATE sets the CHECKINDATE field.
func (m *BooksMutation) SetCHECKINDATE(s string) {
	m._CHECKINDATE = &s
}

// CHECKINDATE returns the CHECKINDATE value in the mutation.
func (m *BooksMutation) CHECKINDATE() (r string, exists bool) {
	v := m._CHECKINDATE
	if v == nil {
		return
	}
	return *v, true
}

// OldCHECKINDATE returns the old CHECKINDATE value of the Books.
// If the Books object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BooksMutation) OldCHECKINDATE(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCHECKINDATE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCHECKINDATE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCHECKINDATE: %w", err)
	}
	return oldValue.CHECKINDATE, nil
}

// ResetCHECKINDATE reset all changes of the "CHECKINDATE" field.
func (m *BooksMutation) ResetCHECKINDATE() {
	m._CHECKINDATE = nil
}

// SetCheckout1ID sets the checkout1 edge to Checkout by id.
func (m *BooksMutation) SetCheckout1ID(id int) {
	m.checkout1 = &id
}

// ClearCheckout1 clears the checkout1 edge to Checkout.
func (m *BooksMutation) ClearCheckout1() {
	m.clearedcheckout1 = true
}

// Checkout1Cleared returns if the edge checkout1 was cleared.
func (m *BooksMutation) Checkout1Cleared() bool {
	return m.clearedcheckout1
}

// Checkout1ID returns the checkout1 id in the mutation.
func (m *BooksMutation) Checkout1ID() (id int, exists bool) {
	if m.checkout1 != nil {
		return *m.checkout1, true
	}
	return
}

// Checkout1IDs returns the checkout1 ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// Checkout1ID instead. It exists only for internal usage by the builders.
func (m *BooksMutation) Checkout1IDs() (ids []int) {
	if id := m.checkout1; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCheckout1 reset all changes of the "checkout1" edge.
func (m *BooksMutation) ResetCheckout1() {
	m.checkout1 = nil
	m.clearedcheckout1 = false
}

// Op returns the operation name.
func (m *BooksMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Books).
func (m *BooksMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BooksMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._CHECKINDATE != nil {
		fields = append(fields, books.FieldCHECKINDATE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BooksMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case books.FieldCHECKINDATE:
		return m.CHECKINDATE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BooksMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case books.FieldCHECKINDATE:
		return m.OldCHECKINDATE(ctx)
	}
	return nil, fmt.Errorf("unknown Books field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BooksMutation) SetField(name string, value ent.Value) error {
	switch name {
	case books.FieldCHECKINDATE:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCHECKINDATE(v)
		return nil
	}
	return fmt.Errorf("unknown Books field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BooksMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BooksMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BooksMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Books numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BooksMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BooksMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BooksMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Books nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BooksMutation) ResetField(name string) error {
	switch name {
	case books.FieldCHECKINDATE:
		m.ResetCHECKINDATE()
		return nil
	}
	return fmt.Errorf("unknown Books field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BooksMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.checkout1 != nil {
		edges = append(edges, books.EdgeCheckout1)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BooksMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case books.EdgeCheckout1:
		if id := m.checkout1; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BooksMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BooksMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BooksMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcheckout1 {
		edges = append(edges, books.EdgeCheckout1)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BooksMutation) EdgeCleared(name string) bool {
	switch name {
	case books.EdgeCheckout1:
		return m.clearedcheckout1
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BooksMutation) ClearEdge(name string) error {
	switch name {
	case books.EdgeCheckout1:
		m.ClearCheckout1()
		return nil
	}
	return fmt.Errorf("unknown Books unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BooksMutation) ResetEdge(name string) error {
	switch name {
	case books.EdgeCheckout1:
		m.ResetCheckout1()
		return nil
	}
	return fmt.Errorf("unknown Books edge %s", name)
}

// CheckoutMutation represents an operation that mutate the Checkouts
// nodes in the graph.
type CheckoutMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_CHECKOUTDATE   *time.Time
	clearedFields   map[string]struct{}
	books           *int
	clearedbooks    bool
	customer        *int
	clearedcustomer bool
	employee        *int
	clearedemployee bool
	room            *int
	clearedroom     bool
	done            bool
	oldValue        func(context.Context) (*Checkout, error)
}

var _ ent.Mutation = (*CheckoutMutation)(nil)

// checkoutOption allows to manage the mutation configuration using functional options.
type checkoutOption func(*CheckoutMutation)

// newCheckoutMutation creates new mutation for $n.Name.
func newCheckoutMutation(c config, op Op, opts ...checkoutOption) *CheckoutMutation {
	m := &CheckoutMutation{
		config:        c,
		op:            op,
		typ:           TypeCheckout,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCheckoutID sets the id field of the mutation.
func withCheckoutID(id int) checkoutOption {
	return func(m *CheckoutMutation) {
		var (
			err   error
			once  sync.Once
			value *Checkout
		)
		m.oldValue = func(ctx context.Context) (*Checkout, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Checkout.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCheckout sets the old Checkout of the mutation.
func withCheckout(node *Checkout) checkoutOption {
	return func(m *CheckoutMutation) {
		m.oldValue = func(context.Context) (*Checkout, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CheckoutMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CheckoutMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CheckoutMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCHECKOUTDATE sets the CHECKOUTDATE field.
func (m *CheckoutMutation) SetCHECKOUTDATE(t time.Time) {
	m._CHECKOUTDATE = &t
}

// CHECKOUTDATE returns the CHECKOUTDATE value in the mutation.
func (m *CheckoutMutation) CHECKOUTDATE() (r time.Time, exists bool) {
	v := m._CHECKOUTDATE
	if v == nil {
		return
	}
	return *v, true
}

// OldCHECKOUTDATE returns the old CHECKOUTDATE value of the Checkout.
// If the Checkout object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CheckoutMutation) OldCHECKOUTDATE(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCHECKOUTDATE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCHECKOUTDATE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCHECKOUTDATE: %w", err)
	}
	return oldValue.CHECKOUTDATE, nil
}

// ResetCHECKOUTDATE reset all changes of the "CHECKOUTDATE" field.
func (m *CheckoutMutation) ResetCHECKOUTDATE() {
	m._CHECKOUTDATE = nil
}

// SetBooksID sets the books edge to Books by id.
func (m *CheckoutMutation) SetBooksID(id int) {
	m.books = &id
}

// ClearBooks clears the books edge to Books.
func (m *CheckoutMutation) ClearBooks() {
	m.clearedbooks = true
}

// BooksCleared returns if the edge books was cleared.
func (m *CheckoutMutation) BooksCleared() bool {
	return m.clearedbooks
}

// BooksID returns the books id in the mutation.
func (m *CheckoutMutation) BooksID() (id int, exists bool) {
	if m.books != nil {
		return *m.books, true
	}
	return
}

// BooksIDs returns the books ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BooksID instead. It exists only for internal usage by the builders.
func (m *CheckoutMutation) BooksIDs() (ids []int) {
	if id := m.books; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBooks reset all changes of the "books" edge.
func (m *CheckoutMutation) ResetBooks() {
	m.books = nil
	m.clearedbooks = false
}

// SetCustomerID sets the customer edge to Customer by id.
func (m *CheckoutMutation) SetCustomerID(id int) {
	m.customer = &id
}

// ClearCustomer clears the customer edge to Customer.
func (m *CheckoutMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared returns if the edge customer was cleared.
func (m *CheckoutMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the customer id in the mutation.
func (m *CheckoutMutation) CustomerID() (id int, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the customer ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *CheckoutMutation) CustomerIDs() (ids []int) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer reset all changes of the "customer" edge.
func (m *CheckoutMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *CheckoutMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *CheckoutMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *CheckoutMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *CheckoutMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *CheckoutMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *CheckoutMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetRoomID sets the room edge to Room by id.
func (m *CheckoutMutation) SetRoomID(id int) {
	m.room = &id
}

// ClearRoom clears the room edge to Room.
func (m *CheckoutMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared returns if the edge room was cleared.
func (m *CheckoutMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the room id in the mutation.
func (m *CheckoutMutation) RoomID() (id int, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the room ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *CheckoutMutation) RoomIDs() (ids []int) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *CheckoutMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// Op returns the operation name.
func (m *CheckoutMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Checkout).
func (m *CheckoutMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CheckoutMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._CHECKOUTDATE != nil {
		fields = append(fields, checkout.FieldCHECKOUTDATE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CheckoutMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case checkout.FieldCHECKOUTDATE:
		return m.CHECKOUTDATE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CheckoutMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case checkout.FieldCHECKOUTDATE:
		return m.OldCHECKOUTDATE(ctx)
	}
	return nil, fmt.Errorf("unknown Checkout field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CheckoutMutation) SetField(name string, value ent.Value) error {
	switch name {
	case checkout.FieldCHECKOUTDATE:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCHECKOUTDATE(v)
		return nil
	}
	return fmt.Errorf("unknown Checkout field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CheckoutMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CheckoutMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CheckoutMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Checkout numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CheckoutMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CheckoutMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CheckoutMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Checkout nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CheckoutMutation) ResetField(name string) error {
	switch name {
	case checkout.FieldCHECKOUTDATE:
		m.ResetCHECKOUTDATE()
		return nil
	}
	return fmt.Errorf("unknown Checkout field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CheckoutMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.books != nil {
		edges = append(edges, checkout.EdgeBooks)
	}
	if m.customer != nil {
		edges = append(edges, checkout.EdgeCustomer)
	}
	if m.employee != nil {
		edges = append(edges, checkout.EdgeEmployee)
	}
	if m.room != nil {
		edges = append(edges, checkout.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CheckoutMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case checkout.EdgeBooks:
		if id := m.books; id != nil {
			return []ent.Value{*id}
		}
	case checkout.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	case checkout.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case checkout.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CheckoutMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CheckoutMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CheckoutMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedbooks {
		edges = append(edges, checkout.EdgeBooks)
	}
	if m.clearedcustomer {
		edges = append(edges, checkout.EdgeCustomer)
	}
	if m.clearedemployee {
		edges = append(edges, checkout.EdgeEmployee)
	}
	if m.clearedroom {
		edges = append(edges, checkout.EdgeRoom)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CheckoutMutation) EdgeCleared(name string) bool {
	switch name {
	case checkout.EdgeBooks:
		return m.clearedbooks
	case checkout.EdgeCustomer:
		return m.clearedcustomer
	case checkout.EdgeEmployee:
		return m.clearedemployee
	case checkout.EdgeRoom:
		return m.clearedroom
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CheckoutMutation) ClearEdge(name string) error {
	switch name {
	case checkout.EdgeBooks:
		m.ClearBooks()
		return nil
	case checkout.EdgeCustomer:
		m.ClearCustomer()
		return nil
	case checkout.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case checkout.EdgeRoom:
		m.ClearRoom()
		return nil
	}
	return fmt.Errorf("unknown Checkout unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CheckoutMutation) ResetEdge(name string) error {
	switch name {
	case checkout.EdgeBooks:
		m.ResetBooks()
		return nil
	case checkout.EdgeCustomer:
		m.ResetCustomer()
		return nil
	case checkout.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case checkout.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown Checkout edge %s", name)
}

// CustomerMutation represents an operation that mutate the Customers
// nodes in the graph.
type CustomerMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_NAME            *string
	clearedFields    map[string]struct{}
	checkout2        map[int]struct{}
	removedcheckout2 map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Customer, error)
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows to manage the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for $n.Name.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the id field of the mutation.
func withCustomerID(id int) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CustomerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNAME sets the NAME field.
func (m *CustomerMutation) SetNAME(s string) {
	m._NAME = &s
}

// NAME returns the NAME value in the mutation.
func (m *CustomerMutation) NAME() (r string, exists bool) {
	v := m._NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldNAME returns the old NAME value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNAME: %w", err)
	}
	return oldValue.NAME, nil
}

// ResetNAME reset all changes of the "NAME" field.
func (m *CustomerMutation) ResetNAME() {
	m._NAME = nil
}

// AddCheckout2IDs adds the checkout2 edge to Checkout by ids.
func (m *CustomerMutation) AddCheckout2IDs(ids ...int) {
	if m.checkout2 == nil {
		m.checkout2 = make(map[int]struct{})
	}
	for i := range ids {
		m.checkout2[ids[i]] = struct{}{}
	}
}

// RemoveCheckout2IDs removes the checkout2 edge to Checkout by ids.
func (m *CustomerMutation) RemoveCheckout2IDs(ids ...int) {
	if m.removedcheckout2 == nil {
		m.removedcheckout2 = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcheckout2[ids[i]] = struct{}{}
	}
}

// RemovedCheckout2 returns the removed ids of checkout2.
func (m *CustomerMutation) RemovedCheckout2IDs() (ids []int) {
	for id := range m.removedcheckout2 {
		ids = append(ids, id)
	}
	return
}

// Checkout2IDs returns the checkout2 ids in the mutation.
func (m *CustomerMutation) Checkout2IDs() (ids []int) {
	for id := range m.checkout2 {
		ids = append(ids, id)
	}
	return
}

// ResetCheckout2 reset all changes of the "checkout2" edge.
func (m *CustomerMutation) ResetCheckout2() {
	m.checkout2 = nil
	m.removedcheckout2 = nil
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._NAME != nil {
		fields = append(fields, customer.FieldNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldNAME:
		return m.NAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldNAME:
		return m.OldNAME(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNAME(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldNAME:
		m.ResetNAME()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.checkout2 != nil {
		edges = append(edges, customer.EdgeCheckout2)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeCheckout2:
		ids := make([]ent.Value, 0, len(m.checkout2))
		for id := range m.checkout2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcheckout2 != nil {
		edges = append(edges, customer.EdgeCheckout2)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeCheckout2:
		ids := make([]ent.Value, 0, len(m.removedcheckout2))
		for id := range m.removedcheckout2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeCheckout2:
		m.ResetCheckout2()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// EmployeeMutation represents an operation that mutate the Employees
// nodes in the graph.
type EmployeeMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_EMPLOYEENAME     *string
	_EMPLOYEEPASSWORD *string
	clearedFields     map[string]struct{}
	checkout3         map[int]struct{}
	removedcheckout3  map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Employee, error)
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows to manage the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for $n.Name.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the id field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEMPLOYEENAME sets the EMPLOYEENAME field.
func (m *EmployeeMutation) SetEMPLOYEENAME(s string) {
	m._EMPLOYEENAME = &s
}

// EMPLOYEENAME returns the EMPLOYEENAME value in the mutation.
func (m *EmployeeMutation) EMPLOYEENAME() (r string, exists bool) {
	v := m._EMPLOYEENAME
	if v == nil {
		return
	}
	return *v, true
}

// OldEMPLOYEENAME returns the old EMPLOYEENAME value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEMPLOYEENAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEMPLOYEENAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEMPLOYEENAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEMPLOYEENAME: %w", err)
	}
	return oldValue.EMPLOYEENAME, nil
}

// ResetEMPLOYEENAME reset all changes of the "EMPLOYEENAME" field.
func (m *EmployeeMutation) ResetEMPLOYEENAME() {
	m._EMPLOYEENAME = nil
}

// SetEMPLOYEEPASSWORD sets the EMPLOYEEPASSWORD field.
func (m *EmployeeMutation) SetEMPLOYEEPASSWORD(s string) {
	m._EMPLOYEEPASSWORD = &s
}

// EMPLOYEEPASSWORD returns the EMPLOYEEPASSWORD value in the mutation.
func (m *EmployeeMutation) EMPLOYEEPASSWORD() (r string, exists bool) {
	v := m._EMPLOYEEPASSWORD
	if v == nil {
		return
	}
	return *v, true
}

// OldEMPLOYEEPASSWORD returns the old EMPLOYEEPASSWORD value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEMPLOYEEPASSWORD(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEMPLOYEEPASSWORD is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEMPLOYEEPASSWORD requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEMPLOYEEPASSWORD: %w", err)
	}
	return oldValue.EMPLOYEEPASSWORD, nil
}

// ResetEMPLOYEEPASSWORD reset all changes of the "EMPLOYEEPASSWORD" field.
func (m *EmployeeMutation) ResetEMPLOYEEPASSWORD() {
	m._EMPLOYEEPASSWORD = nil
}

// AddCheckout3IDs adds the checkout3 edge to Checkout by ids.
func (m *EmployeeMutation) AddCheckout3IDs(ids ...int) {
	if m.checkout3 == nil {
		m.checkout3 = make(map[int]struct{})
	}
	for i := range ids {
		m.checkout3[ids[i]] = struct{}{}
	}
}

// RemoveCheckout3IDs removes the checkout3 edge to Checkout by ids.
func (m *EmployeeMutation) RemoveCheckout3IDs(ids ...int) {
	if m.removedcheckout3 == nil {
		m.removedcheckout3 = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcheckout3[ids[i]] = struct{}{}
	}
}

// RemovedCheckout3 returns the removed ids of checkout3.
func (m *EmployeeMutation) RemovedCheckout3IDs() (ids []int) {
	for id := range m.removedcheckout3 {
		ids = append(ids, id)
	}
	return
}

// Checkout3IDs returns the checkout3 ids in the mutation.
func (m *EmployeeMutation) Checkout3IDs() (ids []int) {
	for id := range m.checkout3 {
		ids = append(ids, id)
	}
	return
}

// ResetCheckout3 reset all changes of the "checkout3" edge.
func (m *EmployeeMutation) ResetCheckout3() {
	m.checkout3 = nil
	m.removedcheckout3 = nil
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._EMPLOYEENAME != nil {
		fields = append(fields, employee.FieldEMPLOYEENAME)
	}
	if m._EMPLOYEEPASSWORD != nil {
		fields = append(fields, employee.FieldEMPLOYEEPASSWORD)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldEMPLOYEENAME:
		return m.EMPLOYEENAME()
	case employee.FieldEMPLOYEEPASSWORD:
		return m.EMPLOYEEPASSWORD()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldEMPLOYEENAME:
		return m.OldEMPLOYEENAME(ctx)
	case employee.FieldEMPLOYEEPASSWORD:
		return m.OldEMPLOYEEPASSWORD(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldEMPLOYEENAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEMPLOYEENAME(v)
		return nil
	case employee.FieldEMPLOYEEPASSWORD:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEMPLOYEEPASSWORD(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldEMPLOYEENAME:
		m.ResetEMPLOYEENAME()
		return nil
	case employee.FieldEMPLOYEEPASSWORD:
		m.ResetEMPLOYEEPASSWORD()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.checkout3 != nil {
		edges = append(edges, employee.EdgeCheckout3)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeCheckout3:
		ids := make([]ent.Value, 0, len(m.checkout3))
		for id := range m.checkout3 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcheckout3 != nil {
		edges = append(edges, employee.EdgeCheckout3)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeCheckout3:
		ids := make([]ent.Value, 0, len(m.removedcheckout3))
		for id := range m.removedcheckout3 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgeCheckout3:
		m.ResetCheckout3()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_ROOMNUMBER      *int
	add_ROOMNUMBER   *int
	clearedFields    map[string]struct{}
	checkout4        *int
	clearedcheckout4 bool
	done             bool
	oldValue         func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetROOMNUMBER sets the ROOMNUMBER field.
func (m *RoomMutation) SetROOMNUMBER(i int) {
	m._ROOMNUMBER = &i
	m.add_ROOMNUMBER = nil
}

// ROOMNUMBER returns the ROOMNUMBER value in the mutation.
func (m *RoomMutation) ROOMNUMBER() (r int, exists bool) {
	v := m._ROOMNUMBER
	if v == nil {
		return
	}
	return *v, true
}

// OldROOMNUMBER returns the old ROOMNUMBER value of the Room.
// If the Room object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomMutation) OldROOMNUMBER(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldROOMNUMBER is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldROOMNUMBER requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldROOMNUMBER: %w", err)
	}
	return oldValue.ROOMNUMBER, nil
}

// AddROOMNUMBER adds i to ROOMNUMBER.
func (m *RoomMutation) AddROOMNUMBER(i int) {
	if m.add_ROOMNUMBER != nil {
		*m.add_ROOMNUMBER += i
	} else {
		m.add_ROOMNUMBER = &i
	}
}

// AddedROOMNUMBER returns the value that was added to the ROOMNUMBER field in this mutation.
func (m *RoomMutation) AddedROOMNUMBER() (r int, exists bool) {
	v := m.add_ROOMNUMBER
	if v == nil {
		return
	}
	return *v, true
}

// ResetROOMNUMBER reset all changes of the "ROOMNUMBER" field.
func (m *RoomMutation) ResetROOMNUMBER() {
	m._ROOMNUMBER = nil
	m.add_ROOMNUMBER = nil
}

// SetCheckout4ID sets the checkout4 edge to Checkout by id.
func (m *RoomMutation) SetCheckout4ID(id int) {
	m.checkout4 = &id
}

// ClearCheckout4 clears the checkout4 edge to Checkout.
func (m *RoomMutation) ClearCheckout4() {
	m.clearedcheckout4 = true
}

// Checkout4Cleared returns if the edge checkout4 was cleared.
func (m *RoomMutation) Checkout4Cleared() bool {
	return m.clearedcheckout4
}

// Checkout4ID returns the checkout4 id in the mutation.
func (m *RoomMutation) Checkout4ID() (id int, exists bool) {
	if m.checkout4 != nil {
		return *m.checkout4, true
	}
	return
}

// Checkout4IDs returns the checkout4 ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// Checkout4ID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) Checkout4IDs() (ids []int) {
	if id := m.checkout4; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCheckout4 reset all changes of the "checkout4" edge.
func (m *RoomMutation) ResetCheckout4() {
	m.checkout4 = nil
	m.clearedcheckout4 = false
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._ROOMNUMBER != nil {
		fields = append(fields, room.FieldROOMNUMBER)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.ROOMNUMBER()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.OldROOMNUMBER(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldROOMNUMBER:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetROOMNUMBER(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	var fields []string
	if m.add_ROOMNUMBER != nil {
		fields = append(fields, room.FieldROOMNUMBER)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.AddedROOMNUMBER()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	case room.FieldROOMNUMBER:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddROOMNUMBER(v)
		return nil
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldROOMNUMBER:
		m.ResetROOMNUMBER()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.checkout4 != nil {
		edges = append(edges, room.EdgeCheckout4)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeCheckout4:
		if id := m.checkout4; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcheckout4 {
		edges = append(edges, room.EdgeCheckout4)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeCheckout4:
		return m.clearedcheckout4
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeCheckout4:
		m.ClearCheckout4()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeCheckout4:
		m.ResetCheckout4()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}
