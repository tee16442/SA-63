// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/chanudomsr/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BooksUpdate is the builder for updating Books entities.
type BooksUpdate struct {
	config
	hooks      []Hook
	mutation   *BooksMutation
	predicates []predicate.Books
}

// Where adds a new predicate for the builder.
func (bu *BooksUpdate) Where(ps ...predicate.Books) *BooksUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetCHECKINDATE sets the CHECKINDATE field.
func (bu *BooksUpdate) SetCHECKINDATE(s string) *BooksUpdate {
	bu.mutation.SetCHECKINDATE(s)
	return bu
}

// SetCheckout1ID sets the checkout1 edge to Checkout by id.
func (bu *BooksUpdate) SetCheckout1ID(id int) *BooksUpdate {
	bu.mutation.SetCheckout1ID(id)
	return bu
}

// SetNillableCheckout1ID sets the checkout1 edge to Checkout by id if the given value is not nil.
func (bu *BooksUpdate) SetNillableCheckout1ID(id *int) *BooksUpdate {
	if id != nil {
		bu = bu.SetCheckout1ID(*id)
	}
	return bu
}

// SetCheckout1 sets the checkout1 edge to Checkout.
func (bu *BooksUpdate) SetCheckout1(c *Checkout) *BooksUpdate {
	return bu.SetCheckout1ID(c.ID)
}

// Mutation returns the BooksMutation object of the builder.
func (bu *BooksUpdate) Mutation() *BooksMutation {
	return bu.mutation
}

// ClearCheckout1 clears the checkout1 edge to Checkout.
func (bu *BooksUpdate) ClearCheckout1() *BooksUpdate {
	bu.mutation.ClearCheckout1()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BooksUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BooksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BooksUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BooksUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BooksUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BooksUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   books.Table,
			Columns: books.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: books.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CHECKINDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: books.FieldCHECKINDATE,
		})
	}
	if bu.mutation.Checkout1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   books.Checkout1Table,
			Columns: []string{books.Checkout1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.Checkout1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   books.Checkout1Table,
			Columns: []string{books.Checkout1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{books.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BooksUpdateOne is the builder for updating a single Books entity.
type BooksUpdateOne struct {
	config
	hooks    []Hook
	mutation *BooksMutation
}

// SetCHECKINDATE sets the CHECKINDATE field.
func (buo *BooksUpdateOne) SetCHECKINDATE(s string) *BooksUpdateOne {
	buo.mutation.SetCHECKINDATE(s)
	return buo
}

// SetCheckout1ID sets the checkout1 edge to Checkout by id.
func (buo *BooksUpdateOne) SetCheckout1ID(id int) *BooksUpdateOne {
	buo.mutation.SetCheckout1ID(id)
	return buo
}

// SetNillableCheckout1ID sets the checkout1 edge to Checkout by id if the given value is not nil.
func (buo *BooksUpdateOne) SetNillableCheckout1ID(id *int) *BooksUpdateOne {
	if id != nil {
		buo = buo.SetCheckout1ID(*id)
	}
	return buo
}

// SetCheckout1 sets the checkout1 edge to Checkout.
func (buo *BooksUpdateOne) SetCheckout1(c *Checkout) *BooksUpdateOne {
	return buo.SetCheckout1ID(c.ID)
}

// Mutation returns the BooksMutation object of the builder.
func (buo *BooksUpdateOne) Mutation() *BooksMutation {
	return buo.mutation
}

// ClearCheckout1 clears the checkout1 edge to Checkout.
func (buo *BooksUpdateOne) ClearCheckout1() *BooksUpdateOne {
	buo.mutation.ClearCheckout1()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BooksUpdateOne) Save(ctx context.Context) (*Books, error) {

	var (
		err  error
		node *Books
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BooksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BooksUpdateOne) SaveX(ctx context.Context) *Books {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BooksUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BooksUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BooksUpdateOne) sqlSave(ctx context.Context) (b *Books, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   books.Table,
			Columns: books.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: books.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Books.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.CHECKINDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: books.FieldCHECKINDATE,
		})
	}
	if buo.mutation.Checkout1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   books.Checkout1Table,
			Columns: []string{books.Checkout1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.Checkout1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   books.Checkout1Table,
			Columns: []string{books.Checkout1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Books{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{books.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
