// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/chanudomsr/app/ent/customer"
	"github.com/chanudomsr/app/ent/employee"
	"github.com/chanudomsr/app/ent/predicate"
	"github.com/chanudomsr/app/ent/room"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CheckoutUpdate is the builder for updating Checkout entities.
type CheckoutUpdate struct {
	config
	hooks      []Hook
	mutation   *CheckoutMutation
	predicates []predicate.Checkout
}

// Where adds a new predicate for the builder.
func (cu *CheckoutUpdate) Where(ps ...predicate.Checkout) *CheckoutUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetCHECKOUTDATE sets the CHECKOUTDATE field.
func (cu *CheckoutUpdate) SetCHECKOUTDATE(t time.Time) *CheckoutUpdate {
	cu.mutation.SetCHECKOUTDATE(t)
	return cu
}

// SetBooksID sets the books edge to Books by id.
func (cu *CheckoutUpdate) SetBooksID(id int) *CheckoutUpdate {
	cu.mutation.SetBooksID(id)
	return cu
}

// SetNillableBooksID sets the books edge to Books by id if the given value is not nil.
func (cu *CheckoutUpdate) SetNillableBooksID(id *int) *CheckoutUpdate {
	if id != nil {
		cu = cu.SetBooksID(*id)
	}
	return cu
}

// SetBooks sets the books edge to Books.
func (cu *CheckoutUpdate) SetBooks(b *Books) *CheckoutUpdate {
	return cu.SetBooksID(b.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (cu *CheckoutUpdate) SetCustomerID(id int) *CheckoutUpdate {
	cu.mutation.SetCustomerID(id)
	return cu
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (cu *CheckoutUpdate) SetNillableCustomerID(id *int) *CheckoutUpdate {
	if id != nil {
		cu = cu.SetCustomerID(*id)
	}
	return cu
}

// SetCustomer sets the customer edge to Customer.
func (cu *CheckoutUpdate) SetCustomer(c *Customer) *CheckoutUpdate {
	return cu.SetCustomerID(c.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (cu *CheckoutUpdate) SetEmployeeID(id int) *CheckoutUpdate {
	cu.mutation.SetEmployeeID(id)
	return cu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (cu *CheckoutUpdate) SetNillableEmployeeID(id *int) *CheckoutUpdate {
	if id != nil {
		cu = cu.SetEmployeeID(*id)
	}
	return cu
}

// SetEmployee sets the employee edge to Employee.
func (cu *CheckoutUpdate) SetEmployee(e *Employee) *CheckoutUpdate {
	return cu.SetEmployeeID(e.ID)
}

// SetRoomID sets the room edge to Room by id.
func (cu *CheckoutUpdate) SetRoomID(id int) *CheckoutUpdate {
	cu.mutation.SetRoomID(id)
	return cu
}

// SetNillableRoomID sets the room edge to Room by id if the given value is not nil.
func (cu *CheckoutUpdate) SetNillableRoomID(id *int) *CheckoutUpdate {
	if id != nil {
		cu = cu.SetRoomID(*id)
	}
	return cu
}

// SetRoom sets the room edge to Room.
func (cu *CheckoutUpdate) SetRoom(r *Room) *CheckoutUpdate {
	return cu.SetRoomID(r.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cu *CheckoutUpdate) Mutation() *CheckoutMutation {
	return cu.mutation
}

// ClearBooks clears the books edge to Books.
func (cu *CheckoutUpdate) ClearBooks() *CheckoutUpdate {
	cu.mutation.ClearBooks()
	return cu
}

// ClearCustomer clears the customer edge to Customer.
func (cu *CheckoutUpdate) ClearCustomer() *CheckoutUpdate {
	cu.mutation.ClearCustomer()
	return cu
}

// ClearEmployee clears the employee edge to Employee.
func (cu *CheckoutUpdate) ClearEmployee() *CheckoutUpdate {
	cu.mutation.ClearEmployee()
	return cu
}

// ClearRoom clears the room edge to Room.
func (cu *CheckoutUpdate) ClearRoom() *CheckoutUpdate {
	cu.mutation.ClearRoom()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CheckoutUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CheckoutUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CheckoutUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CheckoutUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CheckoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkout.Table,
			Columns: checkout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkout.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CHECKOUTDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldCHECKOUTDATE,
		})
	}
	if cu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.BooksTable,
			Columns: []string{checkout.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.BooksTable,
			Columns: []string{checkout.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CustomerTable,
			Columns: []string{checkout.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CustomerTable,
			Columns: []string{checkout.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.EmployeeTable,
			Columns: []string{checkout.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.EmployeeTable,
			Columns: []string{checkout.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.RoomTable,
			Columns: []string{checkout.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.RoomTable,
			Columns: []string{checkout.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CheckoutUpdateOne is the builder for updating a single Checkout entity.
type CheckoutUpdateOne struct {
	config
	hooks    []Hook
	mutation *CheckoutMutation
}

// SetCHECKOUTDATE sets the CHECKOUTDATE field.
func (cuo *CheckoutUpdateOne) SetCHECKOUTDATE(t time.Time) *CheckoutUpdateOne {
	cuo.mutation.SetCHECKOUTDATE(t)
	return cuo
}

// SetBooksID sets the books edge to Books by id.
func (cuo *CheckoutUpdateOne) SetBooksID(id int) *CheckoutUpdateOne {
	cuo.mutation.SetBooksID(id)
	return cuo
}

// SetNillableBooksID sets the books edge to Books by id if the given value is not nil.
func (cuo *CheckoutUpdateOne) SetNillableBooksID(id *int) *CheckoutUpdateOne {
	if id != nil {
		cuo = cuo.SetBooksID(*id)
	}
	return cuo
}

// SetBooks sets the books edge to Books.
func (cuo *CheckoutUpdateOne) SetBooks(b *Books) *CheckoutUpdateOne {
	return cuo.SetBooksID(b.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (cuo *CheckoutUpdateOne) SetCustomerID(id int) *CheckoutUpdateOne {
	cuo.mutation.SetCustomerID(id)
	return cuo
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (cuo *CheckoutUpdateOne) SetNillableCustomerID(id *int) *CheckoutUpdateOne {
	if id != nil {
		cuo = cuo.SetCustomerID(*id)
	}
	return cuo
}

// SetCustomer sets the customer edge to Customer.
func (cuo *CheckoutUpdateOne) SetCustomer(c *Customer) *CheckoutUpdateOne {
	return cuo.SetCustomerID(c.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (cuo *CheckoutUpdateOne) SetEmployeeID(id int) *CheckoutUpdateOne {
	cuo.mutation.SetEmployeeID(id)
	return cuo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (cuo *CheckoutUpdateOne) SetNillableEmployeeID(id *int) *CheckoutUpdateOne {
	if id != nil {
		cuo = cuo.SetEmployeeID(*id)
	}
	return cuo
}

// SetEmployee sets the employee edge to Employee.
func (cuo *CheckoutUpdateOne) SetEmployee(e *Employee) *CheckoutUpdateOne {
	return cuo.SetEmployeeID(e.ID)
}

// SetRoomID sets the room edge to Room by id.
func (cuo *CheckoutUpdateOne) SetRoomID(id int) *CheckoutUpdateOne {
	cuo.mutation.SetRoomID(id)
	return cuo
}

// SetNillableRoomID sets the room edge to Room by id if the given value is not nil.
func (cuo *CheckoutUpdateOne) SetNillableRoomID(id *int) *CheckoutUpdateOne {
	if id != nil {
		cuo = cuo.SetRoomID(*id)
	}
	return cuo
}

// SetRoom sets the room edge to Room.
func (cuo *CheckoutUpdateOne) SetRoom(r *Room) *CheckoutUpdateOne {
	return cuo.SetRoomID(r.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cuo *CheckoutUpdateOne) Mutation() *CheckoutMutation {
	return cuo.mutation
}

// ClearBooks clears the books edge to Books.
func (cuo *CheckoutUpdateOne) ClearBooks() *CheckoutUpdateOne {
	cuo.mutation.ClearBooks()
	return cuo
}

// ClearCustomer clears the customer edge to Customer.
func (cuo *CheckoutUpdateOne) ClearCustomer() *CheckoutUpdateOne {
	cuo.mutation.ClearCustomer()
	return cuo
}

// ClearEmployee clears the employee edge to Employee.
func (cuo *CheckoutUpdateOne) ClearEmployee() *CheckoutUpdateOne {
	cuo.mutation.ClearEmployee()
	return cuo
}

// ClearRoom clears the room edge to Room.
func (cuo *CheckoutUpdateOne) ClearRoom() *CheckoutUpdateOne {
	cuo.mutation.ClearRoom()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CheckoutUpdateOne) Save(ctx context.Context) (*Checkout, error) {

	var (
		err  error
		node *Checkout
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CheckoutUpdateOne) SaveX(ctx context.Context) *Checkout {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CheckoutUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CheckoutUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CheckoutUpdateOne) sqlSave(ctx context.Context) (c *Checkout, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkout.Table,
			Columns: checkout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkout.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Checkout.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.CHECKOUTDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldCHECKOUTDATE,
		})
	}
	if cuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.BooksTable,
			Columns: []string{checkout.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.BooksTable,
			Columns: []string{checkout.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CustomerTable,
			Columns: []string{checkout.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CustomerTable,
			Columns: []string{checkout.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.EmployeeTable,
			Columns: []string{checkout.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.EmployeeTable,
			Columns: []string{checkout.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.RoomTable,
			Columns: []string{checkout.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.RoomTable,
			Columns: []string{checkout.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Checkout{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
