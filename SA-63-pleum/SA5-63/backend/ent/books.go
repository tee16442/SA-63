// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/chanudomsr/app/ent/books"
	"github.com/chanudomsr/app/ent/checkout"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Books is the model entity for the Books schema.
type Books struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CHECKINDATE holds the value of the "CHECKINDATE" field.
	CHECKINDATE string `json:"CHECKINDATE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BooksQuery when eager-loading is set.
	Edges BooksEdges `json:"edges"`
}

// BooksEdges holds the relations/edges for other nodes in the graph.
type BooksEdges struct {
	// Checkout1 holds the value of the checkout1 edge.
	Checkout1 *Checkout
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Checkout1OrErr returns the Checkout1 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BooksEdges) Checkout1OrErr() (*Checkout, error) {
	if e.loadedTypes[0] {
		if e.Checkout1 == nil {
			// The edge checkout1 was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: checkout.Label}
		}
		return e.Checkout1, nil
	}
	return nil, &NotLoadedError{edge: "checkout1"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Books) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // CHECKINDATE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Books fields.
func (b *Books) assignValues(values ...interface{}) error {
	if m, n := len(values), len(books.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CHECKINDATE", values[0])
	} else if value.Valid {
		b.CHECKINDATE = value.String
	}
	return nil
}

// QueryCheckout1 queries the checkout1 edge of the Books.
func (b *Books) QueryCheckout1() *CheckoutQuery {
	return (&BooksClient{config: b.config}).QueryCheckout1(b)
}

// Update returns a builder for updating this Books.
// Note that, you need to call Books.Unwrap() before calling this method, if this Books
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Books) Update() *BooksUpdateOne {
	return (&BooksClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Books) Unwrap() *Books {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Books is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Books) String() string {
	var builder strings.Builder
	builder.WriteString("Books(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", CHECKINDATE=")
	builder.WriteString(b.CHECKINDATE)
	builder.WriteByte(')')
	return builder.String()
}

// BooksSlice is a parsable slice of Books.
type BooksSlice []*Books

func (b BooksSlice) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
