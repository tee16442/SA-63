// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/ADMIN/app/ent/customer"
	"github.com/ADMIN/app/ent/customertype"
	"github.com/ADMIN/app/ent/gender"
	"github.com/ADMIN/app/ent/title"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomer     = "Customer"
	TypeCustomertype = "Customertype"
	TypeGender       = "Gender"
	TypeTitle        = "Title"
)

// CustomerMutation represents an operation that mutate the Customers
// nodes in the graph.
type CustomerMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_NAME               *string
	_AGE                *int
	add_AGE             *int
	_EMAIL              *string
	_USERNAME           *string
	_PASSWORD           *string
	clearedFields       map[string]struct{}
	gender              *int
	clearedgender       bool
	customertype        *int
	clearedcustomertype bool
	title               *int
	clearedtitle        bool
	done                bool
	oldValue            func(context.Context) (*Customer, error)
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows to manage the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for $n.Name.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the id field of the mutation.
func withCustomerID(id int) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CustomerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNAME sets the NAME field.
func (m *CustomerMutation) SetNAME(s string) {
	m._NAME = &s
}

// NAME returns the NAME value in the mutation.
func (m *CustomerMutation) NAME() (r string, exists bool) {
	v := m._NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldNAME returns the old NAME value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNAME: %w", err)
	}
	return oldValue.NAME, nil
}

// ResetNAME reset all changes of the "NAME" field.
func (m *CustomerMutation) ResetNAME() {
	m._NAME = nil
}

// SetAGE sets the AGE field.
func (m *CustomerMutation) SetAGE(i int) {
	m._AGE = &i
	m.add_AGE = nil
}

// AGE returns the AGE value in the mutation.
func (m *CustomerMutation) AGE() (r int, exists bool) {
	v := m._AGE
	if v == nil {
		return
	}
	return *v, true
}

// OldAGE returns the old AGE value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldAGE(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAGE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAGE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAGE: %w", err)
	}
	return oldValue.AGE, nil
}

// AddAGE adds i to AGE.
func (m *CustomerMutation) AddAGE(i int) {
	if m.add_AGE != nil {
		*m.add_AGE += i
	} else {
		m.add_AGE = &i
	}
}

// AddedAGE returns the value that was added to the AGE field in this mutation.
func (m *CustomerMutation) AddedAGE() (r int, exists bool) {
	v := m.add_AGE
	if v == nil {
		return
	}
	return *v, true
}

// ResetAGE reset all changes of the "AGE" field.
func (m *CustomerMutation) ResetAGE() {
	m._AGE = nil
	m.add_AGE = nil
}

// SetEMAIL sets the EMAIL field.
func (m *CustomerMutation) SetEMAIL(s string) {
	m._EMAIL = &s
}

// EMAIL returns the EMAIL value in the mutation.
func (m *CustomerMutation) EMAIL() (r string, exists bool) {
	v := m._EMAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldEMAIL returns the old EMAIL value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldEMAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEMAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEMAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEMAIL: %w", err)
	}
	return oldValue.EMAIL, nil
}

// ResetEMAIL reset all changes of the "EMAIL" field.
func (m *CustomerMutation) ResetEMAIL() {
	m._EMAIL = nil
}

// SetUSERNAME sets the USERNAME field.
func (m *CustomerMutation) SetUSERNAME(s string) {
	m._USERNAME = &s
}

// USERNAME returns the USERNAME value in the mutation.
func (m *CustomerMutation) USERNAME() (r string, exists bool) {
	v := m._USERNAME
	if v == nil {
		return
	}
	return *v, true
}

// OldUSERNAME returns the old USERNAME value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldUSERNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSERNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSERNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSERNAME: %w", err)
	}
	return oldValue.USERNAME, nil
}

// ResetUSERNAME reset all changes of the "USERNAME" field.
func (m *CustomerMutation) ResetUSERNAME() {
	m._USERNAME = nil
}

// SetPASSWORD sets the PASSWORD field.
func (m *CustomerMutation) SetPASSWORD(s string) {
	m._PASSWORD = &s
}

// PASSWORD returns the PASSWORD value in the mutation.
func (m *CustomerMutation) PASSWORD() (r string, exists bool) {
	v := m._PASSWORD
	if v == nil {
		return
	}
	return *v, true
}

// OldPASSWORD returns the old PASSWORD value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldPASSWORD(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPASSWORD is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPASSWORD requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPASSWORD: %w", err)
	}
	return oldValue.PASSWORD, nil
}

// ResetPASSWORD reset all changes of the "PASSWORD" field.
func (m *CustomerMutation) ResetPASSWORD() {
	m._PASSWORD = nil
}

// SetGenderID sets the gender edge to Gender by id.
func (m *CustomerMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *CustomerMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *CustomerMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *CustomerMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *CustomerMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// SetCustomertypeID sets the customertype edge to Customertype by id.
func (m *CustomerMutation) SetCustomertypeID(id int) {
	m.customertype = &id
}

// ClearCustomertype clears the customertype edge to Customertype.
func (m *CustomerMutation) ClearCustomertype() {
	m.clearedcustomertype = true
}

// CustomertypeCleared returns if the edge customertype was cleared.
func (m *CustomerMutation) CustomertypeCleared() bool {
	return m.clearedcustomertype
}

// CustomertypeID returns the customertype id in the mutation.
func (m *CustomerMutation) CustomertypeID() (id int, exists bool) {
	if m.customertype != nil {
		return *m.customertype, true
	}
	return
}

// CustomertypeIDs returns the customertype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CustomertypeID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) CustomertypeIDs() (ids []int) {
	if id := m.customertype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomertype reset all changes of the "customertype" edge.
func (m *CustomerMutation) ResetCustomertype() {
	m.customertype = nil
	m.clearedcustomertype = false
}

// SetTitleID sets the title edge to Title by id.
func (m *CustomerMutation) SetTitleID(id int) {
	m.title = &id
}

// ClearTitle clears the title edge to Title.
func (m *CustomerMutation) ClearTitle() {
	m.clearedtitle = true
}

// TitleCleared returns if the edge title was cleared.
func (m *CustomerMutation) TitleCleared() bool {
	return m.clearedtitle
}

// TitleID returns the title id in the mutation.
func (m *CustomerMutation) TitleID() (id int, exists bool) {
	if m.title != nil {
		return *m.title, true
	}
	return
}

// TitleIDs returns the title ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// TitleID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) TitleIDs() (ids []int) {
	if id := m.title; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTitle reset all changes of the "title" edge.
func (m *CustomerMutation) ResetTitle() {
	m.title = nil
	m.clearedtitle = false
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._NAME != nil {
		fields = append(fields, customer.FieldNAME)
	}
	if m._AGE != nil {
		fields = append(fields, customer.FieldAGE)
	}
	if m._EMAIL != nil {
		fields = append(fields, customer.FieldEMAIL)
	}
	if m._USERNAME != nil {
		fields = append(fields, customer.FieldUSERNAME)
	}
	if m._PASSWORD != nil {
		fields = append(fields, customer.FieldPASSWORD)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldNAME:
		return m.NAME()
	case customer.FieldAGE:
		return m.AGE()
	case customer.FieldEMAIL:
		return m.EMAIL()
	case customer.FieldUSERNAME:
		return m.USERNAME()
	case customer.FieldPASSWORD:
		return m.PASSWORD()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldNAME:
		return m.OldNAME(ctx)
	case customer.FieldAGE:
		return m.OldAGE(ctx)
	case customer.FieldEMAIL:
		return m.OldEMAIL(ctx)
	case customer.FieldUSERNAME:
		return m.OldUSERNAME(ctx)
	case customer.FieldPASSWORD:
		return m.OldPASSWORD(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNAME(v)
		return nil
	case customer.FieldAGE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAGE(v)
		return nil
	case customer.FieldEMAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEMAIL(v)
		return nil
	case customer.FieldUSERNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSERNAME(v)
		return nil
	case customer.FieldPASSWORD:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPASSWORD(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CustomerMutation) AddedFields() []string {
	var fields []string
	if m.add_AGE != nil {
		fields = append(fields, customer.FieldAGE)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldAGE:
		return m.AddedAGE()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case customer.FieldAGE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAGE(v)
		return nil
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldNAME:
		m.ResetNAME()
		return nil
	case customer.FieldAGE:
		m.ResetAGE()
		return nil
	case customer.FieldEMAIL:
		m.ResetEMAIL()
		return nil
	case customer.FieldUSERNAME:
		m.ResetUSERNAME()
		return nil
	case customer.FieldPASSWORD:
		m.ResetPASSWORD()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.gender != nil {
		edges = append(edges, customer.EdgeGender)
	}
	if m.customertype != nil {
		edges = append(edges, customer.EdgeCustomertype)
	}
	if m.title != nil {
		edges = append(edges, customer.EdgeTitle)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case customer.EdgeCustomertype:
		if id := m.customertype; id != nil {
			return []ent.Value{*id}
		}
	case customer.EdgeTitle:
		if id := m.title; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgender {
		edges = append(edges, customer.EdgeGender)
	}
	if m.clearedcustomertype {
		edges = append(edges, customer.EdgeCustomertype)
	}
	if m.clearedtitle {
		edges = append(edges, customer.EdgeTitle)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeGender:
		return m.clearedgender
	case customer.EdgeCustomertype:
		return m.clearedcustomertype
	case customer.EdgeTitle:
		return m.clearedtitle
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	case customer.EdgeGender:
		m.ClearGender()
		return nil
	case customer.EdgeCustomertype:
		m.ClearCustomertype()
		return nil
	case customer.EdgeTitle:
		m.ClearTitle()
		return nil
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeGender:
		m.ResetGender()
		return nil
	case customer.EdgeCustomertype:
		m.ResetCustomertype()
		return nil
	case customer.EdgeTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// CustomertypeMutation represents an operation that mutate the Customertypes
// nodes in the graph.
type CustomertypeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_CUSTOMERTYPE    *string
	clearedFields    map[string]struct{}
	customer3        map[int]struct{}
	removedcustomer3 map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Customertype, error)
}

var _ ent.Mutation = (*CustomertypeMutation)(nil)

// customertypeOption allows to manage the mutation configuration using functional options.
type customertypeOption func(*CustomertypeMutation)

// newCustomertypeMutation creates new mutation for $n.Name.
func newCustomertypeMutation(c config, op Op, opts ...customertypeOption) *CustomertypeMutation {
	m := &CustomertypeMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomertype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomertypeID sets the id field of the mutation.
func withCustomertypeID(id int) customertypeOption {
	return func(m *CustomertypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Customertype
		)
		m.oldValue = func(ctx context.Context) (*Customertype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customertype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomertype sets the old Customertype of the mutation.
func withCustomertype(node *Customertype) customertypeOption {
	return func(m *CustomertypeMutation) {
		m.oldValue = func(context.Context) (*Customertype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomertypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomertypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CustomertypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCUSTOMERTYPE sets the CUSTOMERTYPE field.
func (m *CustomertypeMutation) SetCUSTOMERTYPE(s string) {
	m._CUSTOMERTYPE = &s
}

// CUSTOMERTYPE returns the CUSTOMERTYPE value in the mutation.
func (m *CustomertypeMutation) CUSTOMERTYPE() (r string, exists bool) {
	v := m._CUSTOMERTYPE
	if v == nil {
		return
	}
	return *v, true
}

// OldCUSTOMERTYPE returns the old CUSTOMERTYPE value of the Customertype.
// If the Customertype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomertypeMutation) OldCUSTOMERTYPE(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCUSTOMERTYPE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCUSTOMERTYPE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCUSTOMERTYPE: %w", err)
	}
	return oldValue.CUSTOMERTYPE, nil
}

// ResetCUSTOMERTYPE reset all changes of the "CUSTOMERTYPE" field.
func (m *CustomertypeMutation) ResetCUSTOMERTYPE() {
	m._CUSTOMERTYPE = nil
}

// AddCustomer3IDs adds the customer3 edge to Customer by ids.
func (m *CustomertypeMutation) AddCustomer3IDs(ids ...int) {
	if m.customer3 == nil {
		m.customer3 = make(map[int]struct{})
	}
	for i := range ids {
		m.customer3[ids[i]] = struct{}{}
	}
}

// RemoveCustomer3IDs removes the customer3 edge to Customer by ids.
func (m *CustomertypeMutation) RemoveCustomer3IDs(ids ...int) {
	if m.removedcustomer3 == nil {
		m.removedcustomer3 = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcustomer3[ids[i]] = struct{}{}
	}
}

// RemovedCustomer3 returns the removed ids of customer3.
func (m *CustomertypeMutation) RemovedCustomer3IDs() (ids []int) {
	for id := range m.removedcustomer3 {
		ids = append(ids, id)
	}
	return
}

// Customer3IDs returns the customer3 ids in the mutation.
func (m *CustomertypeMutation) Customer3IDs() (ids []int) {
	for id := range m.customer3 {
		ids = append(ids, id)
	}
	return
}

// ResetCustomer3 reset all changes of the "customer3" edge.
func (m *CustomertypeMutation) ResetCustomer3() {
	m.customer3 = nil
	m.removedcustomer3 = nil
}

// Op returns the operation name.
func (m *CustomertypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customertype).
func (m *CustomertypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CustomertypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._CUSTOMERTYPE != nil {
		fields = append(fields, customertype.FieldCUSTOMERTYPE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CustomertypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customertype.FieldCUSTOMERTYPE:
		return m.CUSTOMERTYPE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CustomertypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customertype.FieldCUSTOMERTYPE:
		return m.OldCUSTOMERTYPE(ctx)
	}
	return nil, fmt.Errorf("unknown Customertype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomertypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customertype.FieldCUSTOMERTYPE:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCUSTOMERTYPE(v)
		return nil
	}
	return fmt.Errorf("unknown Customertype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CustomertypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CustomertypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomertypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customertype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CustomertypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CustomertypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomertypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customertype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CustomertypeMutation) ResetField(name string) error {
	switch name {
	case customertype.FieldCUSTOMERTYPE:
		m.ResetCUSTOMERTYPE()
		return nil
	}
	return fmt.Errorf("unknown Customertype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CustomertypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.customer3 != nil {
		edges = append(edges, customertype.EdgeCustomer3)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CustomertypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customertype.EdgeCustomer3:
		ids := make([]ent.Value, 0, len(m.customer3))
		for id := range m.customer3 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CustomertypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcustomer3 != nil {
		edges = append(edges, customertype.EdgeCustomer3)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CustomertypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customertype.EdgeCustomer3:
		ids := make([]ent.Value, 0, len(m.removedcustomer3))
		for id := range m.removedcustomer3 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CustomertypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CustomertypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CustomertypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customertype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CustomertypeMutation) ResetEdge(name string) error {
	switch name {
	case customertype.EdgeCustomer3:
		m.ResetCustomer3()
		return nil
	}
	return fmt.Errorf("unknown Customertype edge %s", name)
}

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_GENDER          *string
	clearedFields    map[string]struct{}
	customer2        map[int]struct{}
	removedcustomer2 map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGENDER sets the GENDER field.
func (m *GenderMutation) SetGENDER(s string) {
	m._GENDER = &s
}

// GENDER returns the GENDER value in the mutation.
func (m *GenderMutation) GENDER() (r string, exists bool) {
	v := m._GENDER
	if v == nil {
		return
	}
	return *v, true
}

// OldGENDER returns the old GENDER value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldGENDER(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGENDER is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGENDER requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGENDER: %w", err)
	}
	return oldValue.GENDER, nil
}

// ResetGENDER reset all changes of the "GENDER" field.
func (m *GenderMutation) ResetGENDER() {
	m._GENDER = nil
}

// AddCustomer2IDs adds the customer2 edge to Customer by ids.
func (m *GenderMutation) AddCustomer2IDs(ids ...int) {
	if m.customer2 == nil {
		m.customer2 = make(map[int]struct{})
	}
	for i := range ids {
		m.customer2[ids[i]] = struct{}{}
	}
}

// RemoveCustomer2IDs removes the customer2 edge to Customer by ids.
func (m *GenderMutation) RemoveCustomer2IDs(ids ...int) {
	if m.removedcustomer2 == nil {
		m.removedcustomer2 = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcustomer2[ids[i]] = struct{}{}
	}
}

// RemovedCustomer2 returns the removed ids of customer2.
func (m *GenderMutation) RemovedCustomer2IDs() (ids []int) {
	for id := range m.removedcustomer2 {
		ids = append(ids, id)
	}
	return
}

// Customer2IDs returns the customer2 ids in the mutation.
func (m *GenderMutation) Customer2IDs() (ids []int) {
	for id := range m.customer2 {
		ids = append(ids, id)
	}
	return
}

// ResetCustomer2 reset all changes of the "customer2" edge.
func (m *GenderMutation) ResetCustomer2() {
	m.customer2 = nil
	m.removedcustomer2 = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._GENDER != nil {
		fields = append(fields, gender.FieldGENDER)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldGENDER:
		return m.GENDER()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldGENDER:
		return m.OldGENDER(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldGENDER:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGENDER(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldGENDER:
		m.ResetGENDER()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.customer2 != nil {
		edges = append(edges, gender.EdgeCustomer2)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgeCustomer2:
		ids := make([]ent.Value, 0, len(m.customer2))
		for id := range m.customer2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcustomer2 != nil {
		edges = append(edges, gender.EdgeCustomer2)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgeCustomer2:
		ids := make([]ent.Value, 0, len(m.removedcustomer2))
		for id := range m.removedcustomer2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgeCustomer2:
		m.ResetCustomer2()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// TitleMutation represents an operation that mutate the Titles
// nodes in the graph.
type TitleMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_TITLETYPE       *string
	clearedFields    map[string]struct{}
	customer4        map[int]struct{}
	removedcustomer4 map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Title, error)
}

var _ ent.Mutation = (*TitleMutation)(nil)

// titleOption allows to manage the mutation configuration using functional options.
type titleOption func(*TitleMutation)

// newTitleMutation creates new mutation for $n.Name.
func newTitleMutation(c config, op Op, opts ...titleOption) *TitleMutation {
	m := &TitleMutation{
		config:        c,
		op:            op,
		typ:           TypeTitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTitleID sets the id field of the mutation.
func withTitleID(id int) titleOption {
	return func(m *TitleMutation) {
		var (
			err   error
			once  sync.Once
			value *Title
		)
		m.oldValue = func(ctx context.Context) (*Title, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Title.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTitle sets the old Title of the mutation.
func withTitle(node *Title) titleOption {
	return func(m *TitleMutation) {
		m.oldValue = func(context.Context) (*Title, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTITLETYPE sets the TITLETYPE field.
func (m *TitleMutation) SetTITLETYPE(s string) {
	m._TITLETYPE = &s
}

// TITLETYPE returns the TITLETYPE value in the mutation.
func (m *TitleMutation) TITLETYPE() (r string, exists bool) {
	v := m._TITLETYPE
	if v == nil {
		return
	}
	return *v, true
}

// OldTITLETYPE returns the old TITLETYPE value of the Title.
// If the Title object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TitleMutation) OldTITLETYPE(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTITLETYPE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTITLETYPE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTITLETYPE: %w", err)
	}
	return oldValue.TITLETYPE, nil
}

// ResetTITLETYPE reset all changes of the "TITLETYPE" field.
func (m *TitleMutation) ResetTITLETYPE() {
	m._TITLETYPE = nil
}

// AddCustomer4IDs adds the customer4 edge to Customer by ids.
func (m *TitleMutation) AddCustomer4IDs(ids ...int) {
	if m.customer4 == nil {
		m.customer4 = make(map[int]struct{})
	}
	for i := range ids {
		m.customer4[ids[i]] = struct{}{}
	}
}

// RemoveCustomer4IDs removes the customer4 edge to Customer by ids.
func (m *TitleMutation) RemoveCustomer4IDs(ids ...int) {
	if m.removedcustomer4 == nil {
		m.removedcustomer4 = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcustomer4[ids[i]] = struct{}{}
	}
}

// RemovedCustomer4 returns the removed ids of customer4.
func (m *TitleMutation) RemovedCustomer4IDs() (ids []int) {
	for id := range m.removedcustomer4 {
		ids = append(ids, id)
	}
	return
}

// Customer4IDs returns the customer4 ids in the mutation.
func (m *TitleMutation) Customer4IDs() (ids []int) {
	for id := range m.customer4 {
		ids = append(ids, id)
	}
	return
}

// ResetCustomer4 reset all changes of the "customer4" edge.
func (m *TitleMutation) ResetCustomer4() {
	m.customer4 = nil
	m.removedcustomer4 = nil
}

// Op returns the operation name.
func (m *TitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Title).
func (m *TitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._TITLETYPE != nil {
		fields = append(fields, title.FieldTITLETYPE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case title.FieldTITLETYPE:
		return m.TITLETYPE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case title.FieldTITLETYPE:
		return m.OldTITLETYPE(ctx)
	}
	return nil, fmt.Errorf("unknown Title field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case title.FieldTITLETYPE:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTITLETYPE(v)
		return nil
	}
	return fmt.Errorf("unknown Title field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Title numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Title nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TitleMutation) ResetField(name string) error {
	switch name {
	case title.FieldTITLETYPE:
		m.ResetTITLETYPE()
		return nil
	}
	return fmt.Errorf("unknown Title field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.customer4 != nil {
		edges = append(edges, title.EdgeCustomer4)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case title.EdgeCustomer4:
		ids := make([]ent.Value, 0, len(m.customer4))
		for id := range m.customer4 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcustomer4 != nil {
		edges = append(edges, title.EdgeCustomer4)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case title.EdgeCustomer4:
		ids := make([]ent.Value, 0, len(m.removedcustomer4))
		for id := range m.removedcustomer4 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Title unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TitleMutation) ResetEdge(name string) error {
	switch name {
	case title.EdgeCustomer4:
		m.ResetCustomer4()
		return nil
	}
	return fmt.Errorf("unknown Title edge %s", name)
}
