// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/ADMIN/app/ent/customer"
	"github.com/ADMIN/app/ent/customertype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CustomertypeCreate is the builder for creating a Customertype entity.
type CustomertypeCreate struct {
	config
	mutation *CustomertypeMutation
	hooks    []Hook
}

// SetCUSTOMERTYPE sets the CUSTOMERTYPE field.
func (cc *CustomertypeCreate) SetCUSTOMERTYPE(s string) *CustomertypeCreate {
	cc.mutation.SetCUSTOMERTYPE(s)
	return cc
}

// AddCustomer3IDs adds the customer3 edge to Customer by ids.
func (cc *CustomertypeCreate) AddCustomer3IDs(ids ...int) *CustomertypeCreate {
	cc.mutation.AddCustomer3IDs(ids...)
	return cc
}

// AddCustomer3 adds the customer3 edges to Customer.
func (cc *CustomertypeCreate) AddCustomer3(c ...*Customer) *CustomertypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomer3IDs(ids...)
}

// Mutation returns the CustomertypeMutation object of the builder.
func (cc *CustomertypeCreate) Mutation() *CustomertypeMutation {
	return cc.mutation
}

// Save creates the Customertype in the database.
func (cc *CustomertypeCreate) Save(ctx context.Context) (*Customertype, error) {
	if _, ok := cc.mutation.CUSTOMERTYPE(); !ok {
		return nil, &ValidationError{Name: "CUSTOMERTYPE", err: errors.New("ent: missing required field \"CUSTOMERTYPE\"")}
	}
	if v, ok := cc.mutation.CUSTOMERTYPE(); ok {
		if err := customertype.CUSTOMERTYPEValidator(v); err != nil {
			return nil, &ValidationError{Name: "CUSTOMERTYPE", err: fmt.Errorf("ent: validator failed for field \"CUSTOMERTYPE\": %w", err)}
		}
	}
	var (
		err  error
		node *Customertype
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomertypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomertypeCreate) SaveX(ctx context.Context) *Customertype {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CustomertypeCreate) sqlSave(ctx context.Context) (*Customertype, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CustomertypeCreate) createSpec() (*Customertype, *sqlgraph.CreateSpec) {
	var (
		c     = &Customertype{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customertype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customertype.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CUSTOMERTYPE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customertype.FieldCUSTOMERTYPE,
		})
		c.CUSTOMERTYPE = value
	}
	if nodes := cc.mutation.Customer3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customertype.Customer3Table,
			Columns: []string{customertype.Customer3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
