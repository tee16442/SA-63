// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/ADMIN/app/ent/customer"
	"github.com/ADMIN/app/ent/customertype"
	"github.com/ADMIN/app/ent/gender"
	"github.com/ADMIN/app/ent/title"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
}

// SetNAME sets the NAME field.
func (cc *CustomerCreate) SetNAME(s string) *CustomerCreate {
	cc.mutation.SetNAME(s)
	return cc
}

// SetAGE sets the AGE field.
func (cc *CustomerCreate) SetAGE(i int) *CustomerCreate {
	cc.mutation.SetAGE(i)
	return cc
}

// SetEMAIL sets the EMAIL field.
func (cc *CustomerCreate) SetEMAIL(s string) *CustomerCreate {
	cc.mutation.SetEMAIL(s)
	return cc
}

// SetUSERNAME sets the USERNAME field.
func (cc *CustomerCreate) SetUSERNAME(s string) *CustomerCreate {
	cc.mutation.SetUSERNAME(s)
	return cc
}

// SetPASSWORD sets the PASSWORD field.
func (cc *CustomerCreate) SetPASSWORD(s string) *CustomerCreate {
	cc.mutation.SetPASSWORD(s)
	return cc
}

// SetGenderID sets the gender edge to Gender by id.
func (cc *CustomerCreate) SetGenderID(id int) *CustomerCreate {
	cc.mutation.SetGenderID(id)
	return cc
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (cc *CustomerCreate) SetNillableGenderID(id *int) *CustomerCreate {
	if id != nil {
		cc = cc.SetGenderID(*id)
	}
	return cc
}

// SetGender sets the gender edge to Gender.
func (cc *CustomerCreate) SetGender(g *Gender) *CustomerCreate {
	return cc.SetGenderID(g.ID)
}

// SetCustomertypeID sets the customertype edge to Customertype by id.
func (cc *CustomerCreate) SetCustomertypeID(id int) *CustomerCreate {
	cc.mutation.SetCustomertypeID(id)
	return cc
}

// SetNillableCustomertypeID sets the customertype edge to Customertype by id if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomertypeID(id *int) *CustomerCreate {
	if id != nil {
		cc = cc.SetCustomertypeID(*id)
	}
	return cc
}

// SetCustomertype sets the customertype edge to Customertype.
func (cc *CustomerCreate) SetCustomertype(c *Customertype) *CustomerCreate {
	return cc.SetCustomertypeID(c.ID)
}

// SetTitleID sets the title edge to Title by id.
func (cc *CustomerCreate) SetTitleID(id int) *CustomerCreate {
	cc.mutation.SetTitleID(id)
	return cc
}

// SetNillableTitleID sets the title edge to Title by id if the given value is not nil.
func (cc *CustomerCreate) SetNillableTitleID(id *int) *CustomerCreate {
	if id != nil {
		cc = cc.SetTitleID(*id)
	}
	return cc
}

// SetTitle sets the title edge to Title.
func (cc *CustomerCreate) SetTitle(t *Title) *CustomerCreate {
	return cc.SetTitleID(t.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	if _, ok := cc.mutation.NAME(); !ok {
		return nil, &ValidationError{Name: "NAME", err: errors.New("ent: missing required field \"NAME\"")}
	}
	if _, ok := cc.mutation.AGE(); !ok {
		return nil, &ValidationError{Name: "AGE", err: errors.New("ent: missing required field \"AGE\"")}
	}
	if _, ok := cc.mutation.EMAIL(); !ok {
		return nil, &ValidationError{Name: "EMAIL", err: errors.New("ent: missing required field \"EMAIL\"")}
	}
	if v, ok := cc.mutation.EMAIL(); ok {
		if err := customer.EMAILValidator(v); err != nil {
			return nil, &ValidationError{Name: "EMAIL", err: fmt.Errorf("ent: validator failed for field \"EMAIL\": %w", err)}
		}
	}
	if _, ok := cc.mutation.USERNAME(); !ok {
		return nil, &ValidationError{Name: "USERNAME", err: errors.New("ent: missing required field \"USERNAME\"")}
	}
	if v, ok := cc.mutation.USERNAME(); ok {
		if err := customer.USERNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "USERNAME", err: fmt.Errorf("ent: validator failed for field \"USERNAME\": %w", err)}
		}
	}
	if _, ok := cc.mutation.PASSWORD(); !ok {
		return nil, &ValidationError{Name: "PASSWORD", err: errors.New("ent: missing required field \"PASSWORD\"")}
	}
	if v, ok := cc.mutation.PASSWORD(); ok {
		if err := customer.PASSWORDValidator(v); err != nil {
			return nil, &ValidationError{Name: "PASSWORD", err: fmt.Errorf("ent: validator failed for field \"PASSWORD\": %w", err)}
		}
	}
	var (
		err  error
		node *Customer
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		c     = &Customer{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customer.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.NAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldNAME,
		})
		c.NAME = value
	}
	if value, ok := cc.mutation.AGE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldAGE,
		})
		c.AGE = value
	}
	if value, ok := cc.mutation.EMAIL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldEMAIL,
		})
		c.EMAIL = value
	}
	if value, ok := cc.mutation.USERNAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldUSERNAME,
		})
		c.USERNAME = value
	}
	if value, ok := cc.mutation.PASSWORD(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldPASSWORD,
		})
		c.PASSWORD = value
	}
	if nodes := cc.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.GenderTable,
			Columns: []string{customer.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomertypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.CustomertypeTable,
			Columns: []string{customer.CustomertypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.TitleTable,
			Columns: []string{customer.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
