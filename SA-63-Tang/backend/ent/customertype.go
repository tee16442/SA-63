// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ADMIN/app/ent/customertype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Customertype is the model entity for the Customertype schema.
type Customertype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CUSTOMERTYPE holds the value of the "CUSTOMERTYPE" field.
	CUSTOMERTYPE string `json:"CUSTOMERTYPE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomertypeQuery when eager-loading is set.
	Edges CustomertypeEdges `json:"edges"`
}

// CustomertypeEdges holds the relations/edges for other nodes in the graph.
type CustomertypeEdges struct {
	// Customer3 holds the value of the customer3 edge.
	Customer3 []*Customer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Customer3OrErr returns the Customer3 value or an error if the edge
// was not loaded in eager-loading.
func (e CustomertypeEdges) Customer3OrErr() ([]*Customer, error) {
	if e.loadedTypes[0] {
		return e.Customer3, nil
	}
	return nil, &NotLoadedError{edge: "customer3"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customertype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // CUSTOMERTYPE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customertype fields.
func (c *Customertype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(customertype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CUSTOMERTYPE", values[0])
	} else if value.Valid {
		c.CUSTOMERTYPE = value.String
	}
	return nil
}

// QueryCustomer3 queries the customer3 edge of the Customertype.
func (c *Customertype) QueryCustomer3() *CustomerQuery {
	return (&CustomertypeClient{config: c.config}).QueryCustomer3(c)
}

// Update returns a builder for updating this Customertype.
// Note that, you need to call Customertype.Unwrap() before calling this method, if this Customertype
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customertype) Update() *CustomertypeUpdateOne {
	return (&CustomertypeClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Customertype) Unwrap() *Customertype {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customertype is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customertype) String() string {
	var builder strings.Builder
	builder.WriteString("Customertype(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", CUSTOMERTYPE=")
	builder.WriteString(c.CUSTOMERTYPE)
	builder.WriteByte(')')
	return builder.String()
}

// Customertypes is a parsable slice of Customertype.
type Customertypes []*Customertype

func (c Customertypes) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
