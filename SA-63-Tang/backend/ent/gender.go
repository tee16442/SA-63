// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ADMIN/app/ent/gender"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Gender is the model entity for the Gender schema.
type Gender struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GENDER holds the value of the "GENDER" field.
	GENDER string `json:"GENDER,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GenderQuery when eager-loading is set.
	Edges GenderEdges `json:"edges"`
}

// GenderEdges holds the relations/edges for other nodes in the graph.
type GenderEdges struct {
	// Customer2 holds the value of the customer2 edge.
	Customer2 []*Customer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Customer2OrErr returns the Customer2 value or an error if the edge
// was not loaded in eager-loading.
func (e GenderEdges) Customer2OrErr() ([]*Customer, error) {
	if e.loadedTypes[0] {
		return e.Customer2, nil
	}
	return nil, &NotLoadedError{edge: "customer2"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gender) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // GENDER
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gender fields.
func (ge *Gender) assignValues(values ...interface{}) error {
	if m, n := len(values), len(gender.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ge.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field GENDER", values[0])
	} else if value.Valid {
		ge.GENDER = value.String
	}
	return nil
}

// QueryCustomer2 queries the customer2 edge of the Gender.
func (ge *Gender) QueryCustomer2() *CustomerQuery {
	return (&GenderClient{config: ge.config}).QueryCustomer2(ge)
}

// Update returns a builder for updating this Gender.
// Note that, you need to call Gender.Unwrap() before calling this method, if this Gender
// was returned from a transaction, and the transaction was committed or rolled back.
func (ge *Gender) Update() *GenderUpdateOne {
	return (&GenderClient{config: ge.config}).UpdateOne(ge)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ge *Gender) Unwrap() *Gender {
	tx, ok := ge.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gender is not a transactional entity")
	}
	ge.config.driver = tx.drv
	return ge
}

// String implements the fmt.Stringer.
func (ge *Gender) String() string {
	var builder strings.Builder
	builder.WriteString("Gender(")
	builder.WriteString(fmt.Sprintf("id=%v", ge.ID))
	builder.WriteString(", GENDER=")
	builder.WriteString(ge.GENDER)
	builder.WriteByte(')')
	return builder.String()
}

// Genders is a parsable slice of Gender.
type Genders []*Gender

func (ge Genders) config(cfg config) {
	for _i := range ge {
		ge[_i].config = cfg
	}
}
