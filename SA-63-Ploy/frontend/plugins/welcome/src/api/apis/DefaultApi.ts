/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Patient
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntAdult,
    EntAdultFromJSON,
    EntAdultToJSON,
    EntBooks,
    EntBooksFromJSON,
    EntBooksToJSON,
    EntCustomer,
    EntCustomerFromJSON,
    EntCustomerToJSON,
    EntKid,
    EntKidFromJSON,
    EntKidToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntRoomamount,
    EntRoomamountFromJSON,
    EntRoomamountToJSON,
} from '../models';

export interface CreateAdultRequest {
    adult: Array<EntAdult>;
}

export interface CreateBooksRequest {
    books: EntBooks;
}

export interface CreateCustomerRequest {
    customer: Array<EntCustomer>;
}

export interface CreateKidRequest {
    kid: Array<EntKid>;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface CreateRoomamountRequest {
    roomamount: EntRoomamount;
}

export interface GetAdultRequest {
    id: number;
}

export interface GetCustomerRequest {
    id: number;
}

export interface GetKidRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetRoomAmountRequest {
    id: number;
}

export interface ListAdultRequest {
    limit?: number;
    offset?: number;
}

export interface ListBooksRequest {
    limit?: number;
    offset?: number;
}

export interface ListCustomerRequest {
    limit?: number;
    offset?: number;
}

export interface ListKidRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomamountRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create adult
     * Create adult
     */
    async createAdultRaw(requestParameters: CreateAdultRequest): Promise<runtime.ApiResponse<EntAdult>> {
        if (requestParameters.adult === null || requestParameters.adult === undefined) {
            throw new runtime.RequiredError('adult','Required parameter requestParameters.adult was null or undefined when calling createAdult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/adults`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.adult.map(EntAdultToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAdultFromJSON(jsonValue));
    }

    /**
     * Create adult
     * Create adult
     */
    async createAdult(requestParameters: CreateAdultRequest): Promise<EntAdult> {
        const response = await this.createAdultRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create books
     * Create books
     */
    async createBooksRaw(requestParameters: CreateBooksRequest): Promise<runtime.ApiResponse<EntBooks>> {
        if (requestParameters.books === null || requestParameters.books === undefined) {
            throw new runtime.RequiredError('books','Required parameter requestParameters.books was null or undefined when calling createBooks.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBooksToJSON(requestParameters.books),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBooksFromJSON(jsonValue));
    }

    /**
     * Create books
     * Create books
     */
    async createBooks(requestParameters: CreateBooksRequest): Promise<EntBooks> {
        const response = await this.createBooksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling createCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customer.map(EntCustomerToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<EntCustomer> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create kid
     * Create kid
     */
    async createKidRaw(requestParameters: CreateKidRequest): Promise<runtime.ApiResponse<EntKid>> {
        if (requestParameters.kid === null || requestParameters.kid === undefined) {
            throw new runtime.RequiredError('kid','Required parameter requestParameters.kid was null or undefined when calling createKid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.kid.map(EntKidToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntKidFromJSON(jsonValue));
    }

    /**
     * Create kid
     * Create kid
     */
    async createKid(requestParameters: CreateKidRequest): Promise<EntKid> {
        const response = await this.createKidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomamount
     * Create roomamount
     */
    async createRoomamountRaw(requestParameters: CreateRoomamountRequest): Promise<runtime.ApiResponse<EntRoomamount>> {
        if (requestParameters.roomamount === null || requestParameters.roomamount === undefined) {
            throw new runtime.RequiredError('roomamount','Required parameter requestParameters.roomamount was null or undefined when calling createRoomamount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomamounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomamountToJSON(requestParameters.roomamount),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomamountFromJSON(jsonValue));
    }

    /**
     * Create roomamount
     * Create roomamount
     */
    async createRoomamount(requestParameters: CreateRoomamountRequest): Promise<EntRoomamount> {
        const response = await this.createRoomamountRaw(requestParameters);
        return await response.value();
    }

    /**
     * get adults by ID
     * Get a adult entity by ID
     */
    async getAdultRaw(requestParameters: GetAdultRequest): Promise<runtime.ApiResponse<EntAdult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAdult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/adults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAdultFromJSON(jsonValue));
    }

    /**
     * get adults by ID
     * Get a adult entity by ID
     */
    async getAdult(requestParameters: GetAdultRequest): Promise<EntAdult> {
        const response = await this.getAdultRaw(requestParameters);
        return await response.value();
    }

    /**
     * get customers by ID
     * Get a customer entity by ID
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * get customers by ID
     * Get a customer entity by ID
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<EntCustomer> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get kids by ID
     * Get a kid entity by ID
     */
    async getKidRaw(requestParameters: GetKidRequest): Promise<runtime.ApiResponse<EntKid>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getKid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntKidFromJSON(jsonValue));
    }

    /**
     * get kids by ID
     * Get a kid entity by ID
     */
    async getKid(requestParameters: GetKidRequest): Promise<EntKid> {
        const response = await this.getKidRaw(requestParameters);
        return await response.value();
    }

    /**
     * get rooms by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get rooms by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomamounts by ID
     * Get a roomamount entity by ID
     */
    async getRoomAmountRaw(requestParameters: GetRoomAmountRequest): Promise<runtime.ApiResponse<EntRoomamount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomAmount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomamounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomamountFromJSON(jsonValue));
    }

    /**
     * get roomamounts by ID
     * Get a roomamount entity by ID
     */
    async getRoomAmount(requestParameters: GetRoomAmountRequest): Promise<EntRoomamount> {
        const response = await this.getRoomAmountRaw(requestParameters);
        return await response.value();
    }

    /**
     * list adult entities
     * List adult entities
     */
    async listAdultRaw(requestParameters: ListAdultRequest): Promise<runtime.ApiResponse<Array<EntAdult>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/adults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAdultFromJSON));
    }

    /**
     * list adult entities
     * List adult entities
     */
    async listAdult(requestParameters: ListAdultRequest): Promise<Array<EntAdult>> {
        const response = await this.listAdultRaw(requestParameters);
        return await response.value();
    }

    /**
     * list books entities
     * List books entities
     */
    async listBooksRaw(requestParameters: ListBooksRequest): Promise<runtime.ApiResponse<Array<EntBooks>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBooksFromJSON));
    }

    /**
     * list books entities
     * List books entities
     */
    async listBooks(requestParameters: ListBooksRequest): Promise<Array<EntBooks>> {
        const response = await this.listBooksRaw(requestParameters);
        return await response.value();
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomerRaw(requestParameters: ListCustomerRequest): Promise<runtime.ApiResponse<Array<EntCustomer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCustomerFromJSON));
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomer(requestParameters: ListCustomerRequest): Promise<Array<EntCustomer>> {
        const response = await this.listCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list kid entities
     * List kid entities
     */
    async listKidRaw(requestParameters: ListKidRequest): Promise<runtime.ApiResponse<Array<EntKid>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntKidFromJSON));
    }

    /**
     * list kid entities
     * List kid entities
     */
    async listKid(requestParameters: ListKidRequest): Promise<Array<EntKid>> {
        const response = await this.listKidRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomamount entities
     * List roomamount entities
     */
    async listRoomamountRaw(requestParameters: ListRoomamountRequest): Promise<runtime.ApiResponse<Array<EntRoomamount>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomamounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomamountFromJSON));
    }

    /**
     * list roomamount entities
     * List roomamount entities
     */
    async listRoomamount(requestParameters: ListRoomamountRequest): Promise<Array<EntRoomamount>> {
        const response = await this.listRoomamountRaw(requestParameters);
        return await response.value();
    }

}
