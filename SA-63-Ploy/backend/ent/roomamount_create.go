// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Sujitnapa21/app/ent/books"
	"github.com/Sujitnapa21/app/ent/roomamount"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoomamountCreate is the builder for creating a Roomamount entity.
type RoomamountCreate struct {
	config
	mutation *RoomamountMutation
	hooks    []Hook
}

// SetAmount sets the Amount field.
func (rc *RoomamountCreate) SetAmount(i int) *RoomamountCreate {
	rc.mutation.SetAmount(i)
	return rc
}

// AddBookIDs adds the books edge to Books by ids.
func (rc *RoomamountCreate) AddBookIDs(ids ...int) *RoomamountCreate {
	rc.mutation.AddBookIDs(ids...)
	return rc
}

// AddBooks adds the books edges to Books.
func (rc *RoomamountCreate) AddBooks(b ...*Books) *RoomamountCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rc.AddBookIDs(ids...)
}

// Mutation returns the RoomamountMutation object of the builder.
func (rc *RoomamountCreate) Mutation() *RoomamountMutation {
	return rc.mutation
}

// Save creates the Roomamount in the database.
func (rc *RoomamountCreate) Save(ctx context.Context) (*Roomamount, error) {
	if _, ok := rc.mutation.Amount(); !ok {
		return nil, &ValidationError{Name: "Amount", err: errors.New("ent: missing required field \"Amount\"")}
	}
	var (
		err  error
		node *Roomamount
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomamountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoomamountCreate) SaveX(ctx context.Context) *Roomamount {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoomamountCreate) sqlSave(ctx context.Context) (*Roomamount, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RoomamountCreate) createSpec() (*Roomamount, *sqlgraph.CreateSpec) {
	var (
		r     = &Roomamount{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roomamount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomamount.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomamount.FieldAmount,
		})
		r.Amount = value
	}
	if nodes := rc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomamount.BooksTable,
			Columns: []string{roomamount.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
