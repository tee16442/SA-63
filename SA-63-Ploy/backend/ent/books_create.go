// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/Sujitnapa21/app/ent/adult"
	"github.com/Sujitnapa21/app/ent/books"
	"github.com/Sujitnapa21/app/ent/customer"
	"github.com/Sujitnapa21/app/ent/kid"
	"github.com/Sujitnapa21/app/ent/room"
	"github.com/Sujitnapa21/app/ent/roomamount"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BooksCreate is the builder for creating a Books entity.
type BooksCreate struct {
	config
	mutation *BooksMutation
	hooks    []Hook
}

// SetCheckin sets the Checkin field.
func (bc *BooksCreate) SetCheckin(t time.Time) *BooksCreate {
	bc.mutation.SetCheckin(t)
	return bc
}

// SetCheckout sets the Checkout field.
func (bc *BooksCreate) SetCheckout(t time.Time) *BooksCreate {
	bc.mutation.SetCheckout(t)
	return bc
}

// SetCustomerID sets the customer edge to Customer by id.
func (bc *BooksCreate) SetCustomerID(id int) *BooksCreate {
	bc.mutation.SetCustomerID(id)
	return bc
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (bc *BooksCreate) SetNillableCustomerID(id *int) *BooksCreate {
	if id != nil {
		bc = bc.SetCustomerID(*id)
	}
	return bc
}

// SetCustomer sets the customer edge to Customer.
func (bc *BooksCreate) SetCustomer(c *Customer) *BooksCreate {
	return bc.SetCustomerID(c.ID)
}

// SetAdultID sets the adult edge to Adult by id.
func (bc *BooksCreate) SetAdultID(id int) *BooksCreate {
	bc.mutation.SetAdultID(id)
	return bc
}

// SetNillableAdultID sets the adult edge to Adult by id if the given value is not nil.
func (bc *BooksCreate) SetNillableAdultID(id *int) *BooksCreate {
	if id != nil {
		bc = bc.SetAdultID(*id)
	}
	return bc
}

// SetAdult sets the adult edge to Adult.
func (bc *BooksCreate) SetAdult(a *Adult) *BooksCreate {
	return bc.SetAdultID(a.ID)
}

// SetKidID sets the kid edge to Kid by id.
func (bc *BooksCreate) SetKidID(id int) *BooksCreate {
	bc.mutation.SetKidID(id)
	return bc
}

// SetNillableKidID sets the kid edge to Kid by id if the given value is not nil.
func (bc *BooksCreate) SetNillableKidID(id *int) *BooksCreate {
	if id != nil {
		bc = bc.SetKidID(*id)
	}
	return bc
}

// SetKid sets the kid edge to Kid.
func (bc *BooksCreate) SetKid(k *Kid) *BooksCreate {
	return bc.SetKidID(k.ID)
}

// SetRoomamountID sets the roomamount edge to Roomamount by id.
func (bc *BooksCreate) SetRoomamountID(id int) *BooksCreate {
	bc.mutation.SetRoomamountID(id)
	return bc
}

// SetNillableRoomamountID sets the roomamount edge to Roomamount by id if the given value is not nil.
func (bc *BooksCreate) SetNillableRoomamountID(id *int) *BooksCreate {
	if id != nil {
		bc = bc.SetRoomamountID(*id)
	}
	return bc
}

// SetRoomamount sets the roomamount edge to Roomamount.
func (bc *BooksCreate) SetRoomamount(r *Roomamount) *BooksCreate {
	return bc.SetRoomamountID(r.ID)
}

// SetRoomID sets the room edge to Room by id.
func (bc *BooksCreate) SetRoomID(id int) *BooksCreate {
	bc.mutation.SetRoomID(id)
	return bc
}

// SetNillableRoomID sets the room edge to Room by id if the given value is not nil.
func (bc *BooksCreate) SetNillableRoomID(id *int) *BooksCreate {
	if id != nil {
		bc = bc.SetRoomID(*id)
	}
	return bc
}

// SetRoom sets the room edge to Room.
func (bc *BooksCreate) SetRoom(r *Room) *BooksCreate {
	return bc.SetRoomID(r.ID)
}

// Mutation returns the BooksMutation object of the builder.
func (bc *BooksCreate) Mutation() *BooksMutation {
	return bc.mutation
}

// Save creates the Books in the database.
func (bc *BooksCreate) Save(ctx context.Context) (*Books, error) {
	if _, ok := bc.mutation.Checkin(); !ok {
		return nil, &ValidationError{Name: "Checkin", err: errors.New("ent: missing required field \"Checkin\"")}
	}
	if _, ok := bc.mutation.Checkout(); !ok {
		return nil, &ValidationError{Name: "Checkout", err: errors.New("ent: missing required field \"Checkout\"")}
	}
	var (
		err  error
		node *Books
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BooksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BooksCreate) SaveX(ctx context.Context) *Books {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BooksCreate) sqlSave(ctx context.Context) (*Books, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BooksCreate) createSpec() (*Books, *sqlgraph.CreateSpec) {
	var (
		b     = &Books{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: books.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: books.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.Checkin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: books.FieldCheckin,
		})
		b.Checkin = value
	}
	if value, ok := bc.mutation.Checkout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: books.FieldCheckout,
		})
		b.Checkout = value
	}
	if nodes := bc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   books.CustomerTable,
			Columns: []string{books.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.AdultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   books.AdultTable,
			Columns: []string{books.AdultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.KidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   books.KidTable,
			Columns: []string{books.KidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.RoomamountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   books.RoomamountTable,
			Columns: []string{books.RoomamountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomamount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   books.RoomTable,
			Columns: []string{books.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
