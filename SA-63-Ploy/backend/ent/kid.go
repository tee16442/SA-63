// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Sujitnapa21/app/ent/kid"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Kid is the model entity for the Kid schema.
type Kid struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "Amount" field.
	Amount int `json:"Amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KidQuery when eager-loading is set.
	Edges KidEdges `json:"edges"`
}

// KidEdges holds the relations/edges for other nodes in the graph.
type KidEdges struct {
	// Books holds the value of the books edge.
	Books []*Books
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e KidEdges) BooksOrErr() ([]*Books, error) {
	if e.loadedTypes[0] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Kid) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // Amount
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Kid fields.
func (k *Kid) assignValues(values ...interface{}) error {
	if m, n := len(values), len(kid.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	k.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Amount", values[0])
	} else if value.Valid {
		k.Amount = int(value.Int64)
	}
	return nil
}

// QueryBooks queries the books edge of the Kid.
func (k *Kid) QueryBooks() *BooksQuery {
	return (&KidClient{config: k.config}).QueryBooks(k)
}

// Update returns a builder for updating this Kid.
// Note that, you need to call Kid.Unwrap() before calling this method, if this Kid
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Kid) Update() *KidUpdateOne {
	return (&KidClient{config: k.config}).UpdateOne(k)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (k *Kid) Unwrap() *Kid {
	tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Kid is not a transactional entity")
	}
	k.config.driver = tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Kid) String() string {
	var builder strings.Builder
	builder.WriteString("Kid(")
	builder.WriteString(fmt.Sprintf("id=%v", k.ID))
	builder.WriteString(", Amount=")
	builder.WriteString(fmt.Sprintf("%v", k.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// Kids is a parsable slice of Kid.
type Kids []*Kid

func (k Kids) config(cfg config) {
	for _i := range k {
		k[_i].config = cfg
	}
}
