// Code generated by entc, DO NOT EDIT.

package books

import (
	"time"

	"github.com/Sujitnapa21/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Checkin applies equality check predicate on the "Checkin" field. It's identical to CheckinEQ.
func Checkin(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckin), v))
	})
}

// Checkout applies equality check predicate on the "Checkout" field. It's identical to CheckoutEQ.
func Checkout(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckout), v))
	})
}

// CheckinEQ applies the EQ predicate on the "Checkin" field.
func CheckinEQ(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckin), v))
	})
}

// CheckinNEQ applies the NEQ predicate on the "Checkin" field.
func CheckinNEQ(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckin), v))
	})
}

// CheckinIn applies the In predicate on the "Checkin" field.
func CheckinIn(vs ...time.Time) predicate.Books {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Books(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckin), v...))
	})
}

// CheckinNotIn applies the NotIn predicate on the "Checkin" field.
func CheckinNotIn(vs ...time.Time) predicate.Books {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Books(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckin), v...))
	})
}

// CheckinGT applies the GT predicate on the "Checkin" field.
func CheckinGT(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckin), v))
	})
}

// CheckinGTE applies the GTE predicate on the "Checkin" field.
func CheckinGTE(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckin), v))
	})
}

// CheckinLT applies the LT predicate on the "Checkin" field.
func CheckinLT(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckin), v))
	})
}

// CheckinLTE applies the LTE predicate on the "Checkin" field.
func CheckinLTE(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckin), v))
	})
}

// CheckoutEQ applies the EQ predicate on the "Checkout" field.
func CheckoutEQ(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckout), v))
	})
}

// CheckoutNEQ applies the NEQ predicate on the "Checkout" field.
func CheckoutNEQ(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckout), v))
	})
}

// CheckoutIn applies the In predicate on the "Checkout" field.
func CheckoutIn(vs ...time.Time) predicate.Books {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Books(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckout), v...))
	})
}

// CheckoutNotIn applies the NotIn predicate on the "Checkout" field.
func CheckoutNotIn(vs ...time.Time) predicate.Books {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Books(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckout), v...))
	})
}

// CheckoutGT applies the GT predicate on the "Checkout" field.
func CheckoutGT(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckout), v))
	})
}

// CheckoutGTE applies the GTE predicate on the "Checkout" field.
func CheckoutGTE(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckout), v))
	})
}

// CheckoutLT applies the LT predicate on the "Checkout" field.
func CheckoutLT(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckout), v))
	})
}

// CheckoutLTE applies the LTE predicate on the "Checkout" field.
func CheckoutLTE(v time.Time) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckout), v))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdult applies the HasEdge predicate on the "adult" edge.
func HasAdult() predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdultTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdultTable, AdultColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdultWith applies the HasEdge predicate on the "adult" edge with a given conditions (other predicates).
func HasAdultWith(preds ...predicate.Adult) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdultInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdultTable, AdultColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKid applies the HasEdge predicate on the "kid" edge.
func HasKid() predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KidTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KidTable, KidColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKidWith applies the HasEdge predicate on the "kid" edge with a given conditions (other predicates).
func HasKidWith(preds ...predicate.Kid) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KidInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KidTable, KidColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoomamount applies the HasEdge predicate on the "roomamount" edge.
func HasRoomamount() predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomamountTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomamountTable, RoomamountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomamountWith applies the HasEdge predicate on the "roomamount" edge with a given conditions (other predicates).
func HasRoomamountWith(preds ...predicate.Roomamount) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomamountInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomamountTable, RoomamountColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Books) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Books) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Books) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		p(s.Not())
	})
}
