// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Sujitnapa21/app/ent/books"
	"github.com/Sujitnapa21/app/ent/kid"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// KidCreate is the builder for creating a Kid entity.
type KidCreate struct {
	config
	mutation *KidMutation
	hooks    []Hook
}

// SetAmount sets the Amount field.
func (kc *KidCreate) SetAmount(i int) *KidCreate {
	kc.mutation.SetAmount(i)
	return kc
}

// AddBookIDs adds the books edge to Books by ids.
func (kc *KidCreate) AddBookIDs(ids ...int) *KidCreate {
	kc.mutation.AddBookIDs(ids...)
	return kc
}

// AddBooks adds the books edges to Books.
func (kc *KidCreate) AddBooks(b ...*Books) *KidCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kc.AddBookIDs(ids...)
}

// Mutation returns the KidMutation object of the builder.
func (kc *KidCreate) Mutation() *KidMutation {
	return kc.mutation
}

// Save creates the Kid in the database.
func (kc *KidCreate) Save(ctx context.Context) (*Kid, error) {
	if _, ok := kc.mutation.Amount(); !ok {
		return nil, &ValidationError{Name: "Amount", err: errors.New("ent: missing required field \"Amount\"")}
	}
	var (
		err  error
		node *Kid
	)
	if len(kc.hooks) == 0 {
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kc.mutation = mutation
			node, err = kc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			mut = kc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KidCreate) SaveX(ctx context.Context) *Kid {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kc *KidCreate) sqlSave(ctx context.Context) (*Kid, error) {
	k, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	k.ID = int(id)
	return k, nil
}

func (kc *KidCreate) createSpec() (*Kid, *sqlgraph.CreateSpec) {
	var (
		k     = &Kid{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kid.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kid.FieldID,
			},
		}
	)
	if value, ok := kc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kid.FieldAmount,
		})
		k.Amount = value
	}
	if nodes := kc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kid.BooksTable,
			Columns: []string{kid.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return k, _spec
}
