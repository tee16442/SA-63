// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Sujitnapa21/app/ent/books"
	"github.com/Sujitnapa21/app/ent/kid"
	"github.com/Sujitnapa21/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// KidUpdate is the builder for updating Kid entities.
type KidUpdate struct {
	config
	hooks      []Hook
	mutation   *KidMutation
	predicates []predicate.Kid
}

// Where adds a new predicate for the builder.
func (ku *KidUpdate) Where(ps ...predicate.Kid) *KidUpdate {
	ku.predicates = append(ku.predicates, ps...)
	return ku
}

// SetAmount sets the Amount field.
func (ku *KidUpdate) SetAmount(i int) *KidUpdate {
	ku.mutation.ResetAmount()
	ku.mutation.SetAmount(i)
	return ku
}

// AddAmount adds i to Amount.
func (ku *KidUpdate) AddAmount(i int) *KidUpdate {
	ku.mutation.AddAmount(i)
	return ku
}

// AddBookIDs adds the books edge to Books by ids.
func (ku *KidUpdate) AddBookIDs(ids ...int) *KidUpdate {
	ku.mutation.AddBookIDs(ids...)
	return ku
}

// AddBooks adds the books edges to Books.
func (ku *KidUpdate) AddBooks(b ...*Books) *KidUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ku.AddBookIDs(ids...)
}

// Mutation returns the KidMutation object of the builder.
func (ku *KidUpdate) Mutation() *KidMutation {
	return ku.mutation
}

// RemoveBookIDs removes the books edge to Books by ids.
func (ku *KidUpdate) RemoveBookIDs(ids ...int) *KidUpdate {
	ku.mutation.RemoveBookIDs(ids...)
	return ku
}

// RemoveBooks removes books edges to Books.
func (ku *KidUpdate) RemoveBooks(b ...*Books) *KidUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ku.RemoveBookIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ku *KidUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ku.hooks) == 0 {
		affected, err = ku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ku.mutation = mutation
			affected, err = ku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ku.hooks) - 1; i >= 0; i-- {
			mut = ku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KidUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KidUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KidUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ku *KidUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kid.Table,
			Columns: kid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kid.FieldID,
			},
		},
	}
	if ps := ku.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kid.FieldAmount,
		})
	}
	if value, ok := ku.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kid.FieldAmount,
		})
	}
	if nodes := ku.mutation.RemovedBooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kid.BooksTable,
			Columns: []string{kid.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kid.BooksTable,
			Columns: []string{kid.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KidUpdateOne is the builder for updating a single Kid entity.
type KidUpdateOne struct {
	config
	hooks    []Hook
	mutation *KidMutation
}

// SetAmount sets the Amount field.
func (kuo *KidUpdateOne) SetAmount(i int) *KidUpdateOne {
	kuo.mutation.ResetAmount()
	kuo.mutation.SetAmount(i)
	return kuo
}

// AddAmount adds i to Amount.
func (kuo *KidUpdateOne) AddAmount(i int) *KidUpdateOne {
	kuo.mutation.AddAmount(i)
	return kuo
}

// AddBookIDs adds the books edge to Books by ids.
func (kuo *KidUpdateOne) AddBookIDs(ids ...int) *KidUpdateOne {
	kuo.mutation.AddBookIDs(ids...)
	return kuo
}

// AddBooks adds the books edges to Books.
func (kuo *KidUpdateOne) AddBooks(b ...*Books) *KidUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kuo.AddBookIDs(ids...)
}

// Mutation returns the KidMutation object of the builder.
func (kuo *KidUpdateOne) Mutation() *KidMutation {
	return kuo.mutation
}

// RemoveBookIDs removes the books edge to Books by ids.
func (kuo *KidUpdateOne) RemoveBookIDs(ids ...int) *KidUpdateOne {
	kuo.mutation.RemoveBookIDs(ids...)
	return kuo
}

// RemoveBooks removes books edges to Books.
func (kuo *KidUpdateOne) RemoveBooks(b ...*Books) *KidUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kuo.RemoveBookIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (kuo *KidUpdateOne) Save(ctx context.Context) (*Kid, error) {

	var (
		err  error
		node *Kid
	)
	if len(kuo.hooks) == 0 {
		node, err = kuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kuo.mutation = mutation
			node, err = kuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuo.hooks) - 1; i >= 0; i-- {
			mut = kuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KidUpdateOne) SaveX(ctx context.Context) *Kid {
	k, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return k
}

// Exec executes the query on the entity.
func (kuo *KidUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KidUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kuo *KidUpdateOne) sqlSave(ctx context.Context) (k *Kid, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kid.Table,
			Columns: kid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kid.FieldID,
			},
		},
	}
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Kid.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := kuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kid.FieldAmount,
		})
	}
	if value, ok := kuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kid.FieldAmount,
		})
	}
	if nodes := kuo.mutation.RemovedBooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kid.BooksTable,
			Columns: []string{kid.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kid.BooksTable,
			Columns: []string{kid.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: books.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	k = &Kid{config: kuo.config}
	_spec.Assign = k.assignValues
	_spec.ScanValues = k.scanValues()
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return k, nil
}
