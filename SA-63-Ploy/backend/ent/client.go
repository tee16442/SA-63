// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Sujitnapa21/app/ent/migrate"

	"github.com/Sujitnapa21/app/ent/adult"
	"github.com/Sujitnapa21/app/ent/books"
	"github.com/Sujitnapa21/app/ent/customer"
	"github.com/Sujitnapa21/app/ent/kid"
	"github.com/Sujitnapa21/app/ent/room"
	"github.com/Sujitnapa21/app/ent/roomamount"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Adult is the client for interacting with the Adult builders.
	Adult *AdultClient
	// Books is the client for interacting with the Books builders.
	Books *BooksClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Kid is the client for interacting with the Kid builders.
	Kid *KidClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// Roomamount is the client for interacting with the Roomamount builders.
	Roomamount *RoomamountClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Adult = NewAdultClient(c.config)
	c.Books = NewBooksClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Kid = NewKidClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.Roomamount = NewRoomamountClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Adult:      NewAdultClient(cfg),
		Books:      NewBooksClient(cfg),
		Customer:   NewCustomerClient(cfg),
		Kid:        NewKidClient(cfg),
		Room:       NewRoomClient(cfg),
		Roomamount: NewRoomamountClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		Adult:      NewAdultClient(cfg),
		Books:      NewBooksClient(cfg),
		Customer:   NewCustomerClient(cfg),
		Kid:        NewKidClient(cfg),
		Room:       NewRoomClient(cfg),
		Roomamount: NewRoomamountClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Adult.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Adult.Use(hooks...)
	c.Books.Use(hooks...)
	c.Customer.Use(hooks...)
	c.Kid.Use(hooks...)
	c.Room.Use(hooks...)
	c.Roomamount.Use(hooks...)
}

// AdultClient is a client for the Adult schema.
type AdultClient struct {
	config
}

// NewAdultClient returns a client for the Adult from the given config.
func NewAdultClient(c config) *AdultClient {
	return &AdultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adult.Hooks(f(g(h())))`.
func (c *AdultClient) Use(hooks ...Hook) {
	c.hooks.Adult = append(c.hooks.Adult, hooks...)
}

// Create returns a create builder for Adult.
func (c *AdultClient) Create() *AdultCreate {
	mutation := newAdultMutation(c.config, OpCreate)
	return &AdultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Adult.
func (c *AdultClient) Update() *AdultUpdate {
	mutation := newAdultMutation(c.config, OpUpdate)
	return &AdultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdultClient) UpdateOne(a *Adult) *AdultUpdateOne {
	mutation := newAdultMutation(c.config, OpUpdateOne, withAdult(a))
	return &AdultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdultClient) UpdateOneID(id int) *AdultUpdateOne {
	mutation := newAdultMutation(c.config, OpUpdateOne, withAdultID(id))
	return &AdultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Adult.
func (c *AdultClient) Delete() *AdultDelete {
	mutation := newAdultMutation(c.config, OpDelete)
	return &AdultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdultClient) DeleteOne(a *Adult) *AdultDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdultClient) DeleteOneID(id int) *AdultDeleteOne {
	builder := c.Delete().Where(adult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdultDeleteOne{builder}
}

// Create returns a query builder for Adult.
func (c *AdultClient) Query() *AdultQuery {
	return &AdultQuery{config: c.config}
}

// Get returns a Adult entity by its id.
func (c *AdultClient) Get(ctx context.Context, id int) (*Adult, error) {
	return c.Query().Where(adult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdultClient) GetX(ctx context.Context, id int) *Adult {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryBooks queries the books edge of a Adult.
func (c *AdultClient) QueryBooks(a *Adult) *BooksQuery {
	query := &BooksQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adult.Table, adult.FieldID, id),
			sqlgraph.To(books.Table, books.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adult.BooksTable, adult.BooksColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdultClient) Hooks() []Hook {
	return c.hooks.Adult
}

// BooksClient is a client for the Books schema.
type BooksClient struct {
	config
}

// NewBooksClient returns a client for the Books from the given config.
func NewBooksClient(c config) *BooksClient {
	return &BooksClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `books.Hooks(f(g(h())))`.
func (c *BooksClient) Use(hooks ...Hook) {
	c.hooks.Books = append(c.hooks.Books, hooks...)
}

// Create returns a create builder for Books.
func (c *BooksClient) Create() *BooksCreate {
	mutation := newBooksMutation(c.config, OpCreate)
	return &BooksCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Books.
func (c *BooksClient) Update() *BooksUpdate {
	mutation := newBooksMutation(c.config, OpUpdate)
	return &BooksUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BooksClient) UpdateOne(b *Books) *BooksUpdateOne {
	mutation := newBooksMutation(c.config, OpUpdateOne, withBooks(b))
	return &BooksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BooksClient) UpdateOneID(id int) *BooksUpdateOne {
	mutation := newBooksMutation(c.config, OpUpdateOne, withBooksID(id))
	return &BooksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Books.
func (c *BooksClient) Delete() *BooksDelete {
	mutation := newBooksMutation(c.config, OpDelete)
	return &BooksDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BooksClient) DeleteOne(b *Books) *BooksDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BooksClient) DeleteOneID(id int) *BooksDeleteOne {
	builder := c.Delete().Where(books.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BooksDeleteOne{builder}
}

// Create returns a query builder for Books.
func (c *BooksClient) Query() *BooksQuery {
	return &BooksQuery{config: c.config}
}

// Get returns a Books entity by its id.
func (c *BooksClient) Get(ctx context.Context, id int) (*Books, error) {
	return c.Query().Where(books.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BooksClient) GetX(ctx context.Context, id int) *Books {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryCustomer queries the customer edge of a Books.
func (c *BooksClient) QueryCustomer(b *Books) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(books.Table, books.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, books.CustomerTable, books.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdult queries the adult edge of a Books.
func (c *BooksClient) QueryAdult(b *Books) *AdultQuery {
	query := &AdultQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(books.Table, books.FieldID, id),
			sqlgraph.To(adult.Table, adult.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, books.AdultTable, books.AdultColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKid queries the kid edge of a Books.
func (c *BooksClient) QueryKid(b *Books) *KidQuery {
	query := &KidQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(books.Table, books.FieldID, id),
			sqlgraph.To(kid.Table, kid.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, books.KidTable, books.KidColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomamount queries the roomamount edge of a Books.
func (c *BooksClient) QueryRoomamount(b *Books) *RoomamountQuery {
	query := &RoomamountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(books.Table, books.FieldID, id),
			sqlgraph.To(roomamount.Table, roomamount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, books.RoomamountTable, books.RoomamountColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a Books.
func (c *BooksClient) QueryRoom(b *Books) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(books.Table, books.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, books.RoomTable, books.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BooksClient) Hooks() []Hook {
	return c.hooks.Books
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Create returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{config: c.config}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	cu, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cu
}

// QueryBooks queries the books edge of a Customer.
func (c *CustomerClient) QueryBooks(cu *Customer) *BooksQuery {
	query := &BooksQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(books.Table, books.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.BooksTable, customer.BooksColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// KidClient is a client for the Kid schema.
type KidClient struct {
	config
}

// NewKidClient returns a client for the Kid from the given config.
func NewKidClient(c config) *KidClient {
	return &KidClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kid.Hooks(f(g(h())))`.
func (c *KidClient) Use(hooks ...Hook) {
	c.hooks.Kid = append(c.hooks.Kid, hooks...)
}

// Create returns a create builder for Kid.
func (c *KidClient) Create() *KidCreate {
	mutation := newKidMutation(c.config, OpCreate)
	return &KidCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Kid.
func (c *KidClient) Update() *KidUpdate {
	mutation := newKidMutation(c.config, OpUpdate)
	return &KidUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KidClient) UpdateOne(k *Kid) *KidUpdateOne {
	mutation := newKidMutation(c.config, OpUpdateOne, withKid(k))
	return &KidUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KidClient) UpdateOneID(id int) *KidUpdateOne {
	mutation := newKidMutation(c.config, OpUpdateOne, withKidID(id))
	return &KidUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Kid.
func (c *KidClient) Delete() *KidDelete {
	mutation := newKidMutation(c.config, OpDelete)
	return &KidDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KidClient) DeleteOne(k *Kid) *KidDeleteOne {
	return c.DeleteOneID(k.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KidClient) DeleteOneID(id int) *KidDeleteOne {
	builder := c.Delete().Where(kid.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KidDeleteOne{builder}
}

// Create returns a query builder for Kid.
func (c *KidClient) Query() *KidQuery {
	return &KidQuery{config: c.config}
}

// Get returns a Kid entity by its id.
func (c *KidClient) Get(ctx context.Context, id int) (*Kid, error) {
	return c.Query().Where(kid.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KidClient) GetX(ctx context.Context, id int) *Kid {
	k, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return k
}

// QueryBooks queries the books edge of a Kid.
func (c *KidClient) QueryBooks(k *Kid) *BooksQuery {
	query := &BooksQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kid.Table, kid.FieldID, id),
			sqlgraph.To(books.Table, books.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kid.BooksTable, kid.BooksColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KidClient) Hooks() []Hook {
	return c.hooks.Kid
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryBooks queries the books edge of a Room.
func (c *RoomClient) QueryBooks(r *Room) *BooksQuery {
	query := &BooksQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(books.Table, books.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.BooksTable, room.BooksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// RoomamountClient is a client for the Roomamount schema.
type RoomamountClient struct {
	config
}

// NewRoomamountClient returns a client for the Roomamount from the given config.
func NewRoomamountClient(c config) *RoomamountClient {
	return &RoomamountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomamount.Hooks(f(g(h())))`.
func (c *RoomamountClient) Use(hooks ...Hook) {
	c.hooks.Roomamount = append(c.hooks.Roomamount, hooks...)
}

// Create returns a create builder for Roomamount.
func (c *RoomamountClient) Create() *RoomamountCreate {
	mutation := newRoomamountMutation(c.config, OpCreate)
	return &RoomamountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roomamount.
func (c *RoomamountClient) Update() *RoomamountUpdate {
	mutation := newRoomamountMutation(c.config, OpUpdate)
	return &RoomamountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomamountClient) UpdateOne(r *Roomamount) *RoomamountUpdateOne {
	mutation := newRoomamountMutation(c.config, OpUpdateOne, withRoomamount(r))
	return &RoomamountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomamountClient) UpdateOneID(id int) *RoomamountUpdateOne {
	mutation := newRoomamountMutation(c.config, OpUpdateOne, withRoomamountID(id))
	return &RoomamountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roomamount.
func (c *RoomamountClient) Delete() *RoomamountDelete {
	mutation := newRoomamountMutation(c.config, OpDelete)
	return &RoomamountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomamountClient) DeleteOne(r *Roomamount) *RoomamountDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomamountClient) DeleteOneID(id int) *RoomamountDeleteOne {
	builder := c.Delete().Where(roomamount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomamountDeleteOne{builder}
}

// Create returns a query builder for Roomamount.
func (c *RoomamountClient) Query() *RoomamountQuery {
	return &RoomamountQuery{config: c.config}
}

// Get returns a Roomamount entity by its id.
func (c *RoomamountClient) Get(ctx context.Context, id int) (*Roomamount, error) {
	return c.Query().Where(roomamount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomamountClient) GetX(ctx context.Context, id int) *Roomamount {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryBooks queries the books edge of a Roomamount.
func (c *RoomamountClient) QueryBooks(r *Roomamount) *BooksQuery {
	query := &BooksQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomamount.Table, roomamount.FieldID, id),
			sqlgraph.To(books.Table, books.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomamount.BooksTable, roomamount.BooksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomamountClient) Hooks() []Hook {
	return c.hooks.Roomamount
}
