/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Patient
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersProblem,
    ControllersProblemFromJSON,
    ControllersProblemToJSON,
    EntCustomer,
    EntCustomerFromJSON,
    EntCustomerToJSON,
    EntProblem,
    EntProblemFromJSON,
    EntProblemToJSON,
    EntProblemtype,
    EntProblemtypeFromJSON,
    EntProblemtypeToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
} from '../models';

export interface CreateCustomerRequest {
    customer: EntCustomer;
}

export interface CreateProblemRequest {
    problem: ControllersProblem;
}

export interface CreateProblemtypeRequest {
    problemtype: EntProblemtype;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface GetCustomerRequest {
    id: number;
}

export interface GetProblemRequest {
    id: number;
}

export interface GetProblemtypeRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface ListCustomerRequest {
    limit?: number;
    offset?: number;
}

export interface ListProblemRequest {
    limit?: number;
    offset?: number;
}

export interface ListProblemtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create customer
     * Create customer
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling createCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCustomerToJSON(requestParameters.customer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<EntCustomer> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create problem
     * Create problem
     */
    async createProblemRaw(requestParameters: CreateProblemRequest): Promise<runtime.ApiResponse<EntProblem>> {
        if (requestParameters.problem === null || requestParameters.problem === undefined) {
            throw new runtime.RequiredError('problem','Required parameter requestParameters.problem was null or undefined when calling createProblem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersProblemToJSON(requestParameters.problem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemFromJSON(jsonValue));
    }

    /**
     * Create problem
     * Create problem
     */
    async createProblem(requestParameters: CreateProblemRequest): Promise<EntProblem> {
        const response = await this.createProblemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create problemtype
     * Create problemtype
     */
    async createProblemtypeRaw(requestParameters: CreateProblemtypeRequest): Promise<runtime.ApiResponse<EntProblemtype>> {
        if (requestParameters.problemtype === null || requestParameters.problemtype === undefined) {
            throw new runtime.RequiredError('problemtype','Required parameter requestParameters.problemtype was null or undefined when calling createProblemtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problemtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntProblemtypeToJSON(requestParameters.problemtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemtypeFromJSON(jsonValue));
    }

    /**
     * Create problemtype
     * Create problemtype
     */
    async createProblemtype(requestParameters: CreateProblemtypeRequest): Promise<EntProblemtype> {
        const response = await this.createProblemtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<EntCustomer> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get problem by ID
     * Get a problem entity by ID
     */
    async getProblemRaw(requestParameters: GetProblemRequest): Promise<runtime.ApiResponse<EntProblem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProblem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problems/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemFromJSON(jsonValue));
    }

    /**
     * get problem by ID
     * Get a problem entity by ID
     */
    async getProblem(requestParameters: GetProblemRequest): Promise<EntProblem> {
        const response = await this.getProblemRaw(requestParameters);
        return await response.value();
    }

    /**
     * get problemtype by ID
     * Get a problemtype entity by ID
     */
    async getProblemtypeRaw(requestParameters: GetProblemtypeRequest): Promise<runtime.ApiResponse<EntProblemtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProblemtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemtypeFromJSON(jsonValue));
    }

    /**
     * get problemtype by ID
     * Get a problemtype entity by ID
     */
    async getProblemtype(requestParameters: GetProblemtypeRequest): Promise<EntProblemtype> {
        const response = await this.getProblemtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomerRaw(requestParameters: ListCustomerRequest): Promise<runtime.ApiResponse<Array<EntCustomer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCustomerFromJSON));
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomer(requestParameters: ListCustomerRequest): Promise<Array<EntCustomer>> {
        const response = await this.listCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list problem entities
     * List problem entities
     */
    async listProblemRaw(requestParameters: ListProblemRequest): Promise<runtime.ApiResponse<Array<EntProblem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProblemFromJSON));
    }

    /**
     * list problem entities
     * List problem entities
     */
    async listProblem(requestParameters: ListProblemRequest): Promise<Array<EntProblem>> {
        const response = await this.listProblemRaw(requestParameters);
        return await response.value();
    }

    /**
     * list problemtype entities
     * List problemtype entities
     */
    async listProblemtypeRaw(requestParameters: ListProblemtypeRequest): Promise<runtime.ApiResponse<Array<EntProblemtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProblemtypeFromJSON));
    }

    /**
     * list problemtype entities
     * List problemtype entities
     */
    async listProblemtype(requestParameters: ListProblemtypeRequest): Promise<Array<EntProblemtype>> {
        const response = await this.listProblemtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

}
