// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tee16/app/ent/problemtype"
)

// Problemtype is the model entity for the Problemtype schema.
type Problemtype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PROBLEMTYPE holds the value of the "PROBLEMTYPE" field.
	PROBLEMTYPE string `json:"PROBLEMTYPE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemtypeQuery when eager-loading is set.
	Edges ProblemtypeEdges `json:"edges"`
}

// ProblemtypeEdges holds the relations/edges for other nodes in the graph.
type ProblemtypeEdges struct {
	// Problem holds the value of the Problem edge.
	Problem []*Problem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProblemOrErr returns the Problem value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemtypeEdges) ProblemOrErr() ([]*Problem, error) {
	if e.loadedTypes[0] {
		return e.Problem, nil
	}
	return nil, &NotLoadedError{edge: "Problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problemtype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PROBLEMTYPE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problemtype fields.
func (pr *Problemtype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(problemtype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PROBLEMTYPE", values[0])
	} else if value.Valid {
		pr.PROBLEMTYPE = value.String
	}
	return nil
}

// QueryProblem queries the Problem edge of the Problemtype.
func (pr *Problemtype) QueryProblem() *ProblemQuery {
	return (&ProblemtypeClient{config: pr.config}).QueryProblem(pr)
}

// Update returns a builder for updating this Problemtype.
// Note that, you need to call Problemtype.Unwrap() before calling this method, if this Problemtype
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problemtype) Update() *ProblemtypeUpdateOne {
	return (&ProblemtypeClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Problemtype) Unwrap() *Problemtype {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problemtype is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problemtype) String() string {
	var builder strings.Builder
	builder.WriteString("Problemtype(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", PROBLEMTYPE=")
	builder.WriteString(pr.PROBLEMTYPE)
	builder.WriteByte(')')
	return builder.String()
}

// Problemtypes is a parsable slice of Problemtype.
type Problemtypes []*Problemtype

func (pr Problemtypes) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
