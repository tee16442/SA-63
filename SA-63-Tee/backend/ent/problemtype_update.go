// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tee16/app/ent/predicate"
	"github.com/tee16/app/ent/problem"
	"github.com/tee16/app/ent/problemtype"
)

// ProblemtypeUpdate is the builder for updating Problemtype entities.
type ProblemtypeUpdate struct {
	config
	hooks      []Hook
	mutation   *ProblemtypeMutation
	predicates []predicate.Problemtype
}

// Where adds a new predicate for the builder.
func (pu *ProblemtypeUpdate) Where(ps ...predicate.Problemtype) *ProblemtypeUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPROBLEMTYPE sets the PROBLEMTYPE field.
func (pu *ProblemtypeUpdate) SetPROBLEMTYPE(s string) *ProblemtypeUpdate {
	pu.mutation.SetPROBLEMTYPE(s)
	return pu
}

// AddProblemIDs adds the Problem edge to Problem by ids.
func (pu *ProblemtypeUpdate) AddProblemIDs(ids ...int) *ProblemtypeUpdate {
	pu.mutation.AddProblemIDs(ids...)
	return pu
}

// AddProblem adds the Problem edges to Problem.
func (pu *ProblemtypeUpdate) AddProblem(p ...*Problem) *ProblemtypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProblemIDs(ids...)
}

// Mutation returns the ProblemtypeMutation object of the builder.
func (pu *ProblemtypeUpdate) Mutation() *ProblemtypeMutation {
	return pu.mutation
}

// RemoveProblemIDs removes the Problem edge to Problem by ids.
func (pu *ProblemtypeUpdate) RemoveProblemIDs(ids ...int) *ProblemtypeUpdate {
	pu.mutation.RemoveProblemIDs(ids...)
	return pu
}

// RemoveProblem removes Problem edges to Problem.
func (pu *ProblemtypeUpdate) RemoveProblem(p ...*Problem) *ProblemtypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProblemIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProblemtypeUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProblemtypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProblemtypeUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProblemtypeUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProblemtypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   problemtype.Table,
			Columns: problemtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problemtype.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PROBLEMTYPE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problemtype.FieldPROBLEMTYPE,
		})
	}
	if nodes := pu.mutation.RemovedProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemTable,
			Columns: []string{problemtype.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemTable,
			Columns: []string{problemtype.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProblemtypeUpdateOne is the builder for updating a single Problemtype entity.
type ProblemtypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProblemtypeMutation
}

// SetPROBLEMTYPE sets the PROBLEMTYPE field.
func (puo *ProblemtypeUpdateOne) SetPROBLEMTYPE(s string) *ProblemtypeUpdateOne {
	puo.mutation.SetPROBLEMTYPE(s)
	return puo
}

// AddProblemIDs adds the Problem edge to Problem by ids.
func (puo *ProblemtypeUpdateOne) AddProblemIDs(ids ...int) *ProblemtypeUpdateOne {
	puo.mutation.AddProblemIDs(ids...)
	return puo
}

// AddProblem adds the Problem edges to Problem.
func (puo *ProblemtypeUpdateOne) AddProblem(p ...*Problem) *ProblemtypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProblemIDs(ids...)
}

// Mutation returns the ProblemtypeMutation object of the builder.
func (puo *ProblemtypeUpdateOne) Mutation() *ProblemtypeMutation {
	return puo.mutation
}

// RemoveProblemIDs removes the Problem edge to Problem by ids.
func (puo *ProblemtypeUpdateOne) RemoveProblemIDs(ids ...int) *ProblemtypeUpdateOne {
	puo.mutation.RemoveProblemIDs(ids...)
	return puo
}

// RemoveProblem removes Problem edges to Problem.
func (puo *ProblemtypeUpdateOne) RemoveProblem(p ...*Problem) *ProblemtypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProblemIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *ProblemtypeUpdateOne) Save(ctx context.Context) (*Problemtype, error) {

	var (
		err  error
		node *Problemtype
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProblemtypeUpdateOne) SaveX(ctx context.Context) *Problemtype {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProblemtypeUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProblemtypeUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProblemtypeUpdateOne) sqlSave(ctx context.Context) (pr *Problemtype, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   problemtype.Table,
			Columns: problemtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problemtype.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Problemtype.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PROBLEMTYPE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problemtype.FieldPROBLEMTYPE,
		})
	}
	if nodes := puo.mutation.RemovedProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemTable,
			Columns: []string{problemtype.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemTable,
			Columns: []string{problemtype.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Problemtype{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
