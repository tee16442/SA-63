// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/tee16/app/ent/customer"
	"github.com/tee16/app/ent/problem"
	"github.com/tee16/app/ent/problemtype"
	"github.com/tee16/app/ent/room"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomer    = "Customer"
	TypeProblem     = "Problem"
	TypeProblemtype = "Problemtype"
	TypeRoom        = "Room"
)

// CustomerMutation represents an operation that mutate the Customers
// nodes in the graph.
type CustomerMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_NAME           *string
	clearedFields   map[string]struct{}
	_Problem        map[int]struct{}
	removed_Problem map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Customer, error)
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows to manage the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for $n.Name.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the id field of the mutation.
func withCustomerID(id int) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CustomerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNAME sets the NAME field.
func (m *CustomerMutation) SetNAME(s string) {
	m._NAME = &s
}

// NAME returns the NAME value in the mutation.
func (m *CustomerMutation) NAME() (r string, exists bool) {
	v := m._NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldNAME returns the old NAME value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNAME: %w", err)
	}
	return oldValue.NAME, nil
}

// ResetNAME reset all changes of the "NAME" field.
func (m *CustomerMutation) ResetNAME() {
	m._NAME = nil
}

// AddProblemIDs adds the Problem edge to Problem by ids.
func (m *CustomerMutation) AddProblemIDs(ids ...int) {
	if m._Problem == nil {
		m._Problem = make(map[int]struct{})
	}
	for i := range ids {
		m._Problem[ids[i]] = struct{}{}
	}
}

// RemoveProblemIDs removes the Problem edge to Problem by ids.
func (m *CustomerMutation) RemoveProblemIDs(ids ...int) {
	if m.removed_Problem == nil {
		m.removed_Problem = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Problem[ids[i]] = struct{}{}
	}
}

// RemovedProblem returns the removed ids of Problem.
func (m *CustomerMutation) RemovedProblemIDs() (ids []int) {
	for id := range m.removed_Problem {
		ids = append(ids, id)
	}
	return
}

// ProblemIDs returns the Problem ids in the mutation.
func (m *CustomerMutation) ProblemIDs() (ids []int) {
	for id := range m._Problem {
		ids = append(ids, id)
	}
	return
}

// ResetProblem reset all changes of the "Problem" edge.
func (m *CustomerMutation) ResetProblem() {
	m._Problem = nil
	m.removed_Problem = nil
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._NAME != nil {
		fields = append(fields, customer.FieldNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldNAME:
		return m.NAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldNAME:
		return m.OldNAME(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNAME(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldNAME:
		m.ResetNAME()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Problem != nil {
		edges = append(edges, customer.EdgeProblem)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeProblem:
		ids := make([]ent.Value, 0, len(m._Problem))
		for id := range m._Problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Problem != nil {
		edges = append(edges, customer.EdgeProblem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeProblem:
		ids := make([]ent.Value, 0, len(m.removed_Problem))
		for id := range m.removed_Problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeProblem:
		m.ResetProblem()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// ProblemMutation represents an operation that mutate the Problems
// nodes in the graph.
type ProblemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_PROBLEMDETAIL      *string
	clearedFields       map[string]struct{}
	_Problemtype        *int
	cleared_Problemtype bool
	_Room               *int
	cleared_Room        bool
	_Customer           *int
	cleared_Customer    bool
	done                bool
	oldValue            func(context.Context) (*Problem, error)
}

var _ ent.Mutation = (*ProblemMutation)(nil)

// problemOption allows to manage the mutation configuration using functional options.
type problemOption func(*ProblemMutation)

// newProblemMutation creates new mutation for $n.Name.
func newProblemMutation(c config, op Op, opts ...problemOption) *ProblemMutation {
	m := &ProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemID sets the id field of the mutation.
func withProblemID(id int) problemOption {
	return func(m *ProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *Problem
		)
		m.oldValue = func(ctx context.Context) (*Problem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Problem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblem sets the old Problem of the mutation.
func withProblem(node *Problem) problemOption {
	return func(m *ProblemMutation) {
		m.oldValue = func(context.Context) (*Problem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProblemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPROBLEMDETAIL sets the PROBLEMDETAIL field.
func (m *ProblemMutation) SetPROBLEMDETAIL(s string) {
	m._PROBLEMDETAIL = &s
}

// PROBLEMDETAIL returns the PROBLEMDETAIL value in the mutation.
func (m *ProblemMutation) PROBLEMDETAIL() (r string, exists bool) {
	v := m._PROBLEMDETAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldPROBLEMDETAIL returns the old PROBLEMDETAIL value of the Problem.
// If the Problem object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProblemMutation) OldPROBLEMDETAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPROBLEMDETAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPROBLEMDETAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPROBLEMDETAIL: %w", err)
	}
	return oldValue.PROBLEMDETAIL, nil
}

// ResetPROBLEMDETAIL reset all changes of the "PROBLEMDETAIL" field.
func (m *ProblemMutation) ResetPROBLEMDETAIL() {
	m._PROBLEMDETAIL = nil
}

// SetProblemtypeID sets the Problemtype edge to Problemtype by id.
func (m *ProblemMutation) SetProblemtypeID(id int) {
	m._Problemtype = &id
}

// ClearProblemtype clears the Problemtype edge to Problemtype.
func (m *ProblemMutation) ClearProblemtype() {
	m.cleared_Problemtype = true
}

// ProblemtypeCleared returns if the edge Problemtype was cleared.
func (m *ProblemMutation) ProblemtypeCleared() bool {
	return m.cleared_Problemtype
}

// ProblemtypeID returns the Problemtype id in the mutation.
func (m *ProblemMutation) ProblemtypeID() (id int, exists bool) {
	if m._Problemtype != nil {
		return *m._Problemtype, true
	}
	return
}

// ProblemtypeIDs returns the Problemtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProblemtypeID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) ProblemtypeIDs() (ids []int) {
	if id := m._Problemtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProblemtype reset all changes of the "Problemtype" edge.
func (m *ProblemMutation) ResetProblemtype() {
	m._Problemtype = nil
	m.cleared_Problemtype = false
}

// SetRoomID sets the Room edge to Room by id.
func (m *ProblemMutation) SetRoomID(id int) {
	m._Room = &id
}

// ClearRoom clears the Room edge to Room.
func (m *ProblemMutation) ClearRoom() {
	m.cleared_Room = true
}

// RoomCleared returns if the edge Room was cleared.
func (m *ProblemMutation) RoomCleared() bool {
	return m.cleared_Room
}

// RoomID returns the Room id in the mutation.
func (m *ProblemMutation) RoomID() (id int, exists bool) {
	if m._Room != nil {
		return *m._Room, true
	}
	return
}

// RoomIDs returns the Room ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) RoomIDs() (ids []int) {
	if id := m._Room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom reset all changes of the "Room" edge.
func (m *ProblemMutation) ResetRoom() {
	m._Room = nil
	m.cleared_Room = false
}

// SetCustomerID sets the Customer edge to Customer by id.
func (m *ProblemMutation) SetCustomerID(id int) {
	m._Customer = &id
}

// ClearCustomer clears the Customer edge to Customer.
func (m *ProblemMutation) ClearCustomer() {
	m.cleared_Customer = true
}

// CustomerCleared returns if the edge Customer was cleared.
func (m *ProblemMutation) CustomerCleared() bool {
	return m.cleared_Customer
}

// CustomerID returns the Customer id in the mutation.
func (m *ProblemMutation) CustomerID() (id int, exists bool) {
	if m._Customer != nil {
		return *m._Customer, true
	}
	return
}

// CustomerIDs returns the Customer ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) CustomerIDs() (ids []int) {
	if id := m._Customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer reset all changes of the "Customer" edge.
func (m *ProblemMutation) ResetCustomer() {
	m._Customer = nil
	m.cleared_Customer = false
}

// Op returns the operation name.
func (m *ProblemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Problem).
func (m *ProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProblemMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._PROBLEMDETAIL != nil {
		fields = append(fields, problem.FieldPROBLEMDETAIL)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problem.FieldPROBLEMDETAIL:
		return m.PROBLEMDETAIL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problem.FieldPROBLEMDETAIL:
		return m.OldPROBLEMDETAIL(ctx)
	}
	return nil, fmt.Errorf("unknown Problem field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problem.FieldPROBLEMDETAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPROBLEMDETAIL(v)
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProblemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProblemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Problem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProblemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Problem nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProblemMutation) ResetField(name string) error {
	switch name {
	case problem.FieldPROBLEMDETAIL:
		m.ResetPROBLEMDETAIL()
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Problemtype != nil {
		edges = append(edges, problem.EdgeProblemtype)
	}
	if m._Room != nil {
		edges = append(edges, problem.EdgeRoom)
	}
	if m._Customer != nil {
		edges = append(edges, problem.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case problem.EdgeProblemtype:
		if id := m._Problemtype; id != nil {
			return []ent.Value{*id}
		}
	case problem.EdgeRoom:
		if id := m._Room; id != nil {
			return []ent.Value{*id}
		}
	case problem.EdgeCustomer:
		if id := m._Customer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProblemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Problemtype {
		edges = append(edges, problem.EdgeProblemtype)
	}
	if m.cleared_Room {
		edges = append(edges, problem.EdgeRoom)
	}
	if m.cleared_Customer {
		edges = append(edges, problem.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case problem.EdgeProblemtype:
		return m.cleared_Problemtype
	case problem.EdgeRoom:
		return m.cleared_Room
	case problem.EdgeCustomer:
		return m.cleared_Customer
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProblemMutation) ClearEdge(name string) error {
	switch name {
	case problem.EdgeProblemtype:
		m.ClearProblemtype()
		return nil
	case problem.EdgeRoom:
		m.ClearRoom()
		return nil
	case problem.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown Problem unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProblemMutation) ResetEdge(name string) error {
	switch name {
	case problem.EdgeProblemtype:
		m.ResetProblemtype()
		return nil
	case problem.EdgeRoom:
		m.ResetRoom()
		return nil
	case problem.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown Problem edge %s", name)
}

// ProblemtypeMutation represents an operation that mutate the Problemtypes
// nodes in the graph.
type ProblemtypeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_PROBLEMTYPE    *string
	clearedFields   map[string]struct{}
	_Problem        map[int]struct{}
	removed_Problem map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Problemtype, error)
}

var _ ent.Mutation = (*ProblemtypeMutation)(nil)

// problemtypeOption allows to manage the mutation configuration using functional options.
type problemtypeOption func(*ProblemtypeMutation)

// newProblemtypeMutation creates new mutation for $n.Name.
func newProblemtypeMutation(c config, op Op, opts ...problemtypeOption) *ProblemtypeMutation {
	m := &ProblemtypeMutation{
		config:        c,
		op:            op,
		typ:           TypeProblemtype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemtypeID sets the id field of the mutation.
func withProblemtypeID(id int) problemtypeOption {
	return func(m *ProblemtypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Problemtype
		)
		m.oldValue = func(ctx context.Context) (*Problemtype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Problemtype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblemtype sets the old Problemtype of the mutation.
func withProblemtype(node *Problemtype) problemtypeOption {
	return func(m *ProblemtypeMutation) {
		m.oldValue = func(context.Context) (*Problemtype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemtypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemtypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProblemtypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPROBLEMTYPE sets the PROBLEMTYPE field.
func (m *ProblemtypeMutation) SetPROBLEMTYPE(s string) {
	m._PROBLEMTYPE = &s
}

// PROBLEMTYPE returns the PROBLEMTYPE value in the mutation.
func (m *ProblemtypeMutation) PROBLEMTYPE() (r string, exists bool) {
	v := m._PROBLEMTYPE
	if v == nil {
		return
	}
	return *v, true
}

// OldPROBLEMTYPE returns the old PROBLEMTYPE value of the Problemtype.
// If the Problemtype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProblemtypeMutation) OldPROBLEMTYPE(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPROBLEMTYPE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPROBLEMTYPE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPROBLEMTYPE: %w", err)
	}
	return oldValue.PROBLEMTYPE, nil
}

// ResetPROBLEMTYPE reset all changes of the "PROBLEMTYPE" field.
func (m *ProblemtypeMutation) ResetPROBLEMTYPE() {
	m._PROBLEMTYPE = nil
}

// AddProblemIDs adds the Problem edge to Problem by ids.
func (m *ProblemtypeMutation) AddProblemIDs(ids ...int) {
	if m._Problem == nil {
		m._Problem = make(map[int]struct{})
	}
	for i := range ids {
		m._Problem[ids[i]] = struct{}{}
	}
}

// RemoveProblemIDs removes the Problem edge to Problem by ids.
func (m *ProblemtypeMutation) RemoveProblemIDs(ids ...int) {
	if m.removed_Problem == nil {
		m.removed_Problem = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Problem[ids[i]] = struct{}{}
	}
}

// RemovedProblem returns the removed ids of Problem.
func (m *ProblemtypeMutation) RemovedProblemIDs() (ids []int) {
	for id := range m.removed_Problem {
		ids = append(ids, id)
	}
	return
}

// ProblemIDs returns the Problem ids in the mutation.
func (m *ProblemtypeMutation) ProblemIDs() (ids []int) {
	for id := range m._Problem {
		ids = append(ids, id)
	}
	return
}

// ResetProblem reset all changes of the "Problem" edge.
func (m *ProblemtypeMutation) ResetProblem() {
	m._Problem = nil
	m.removed_Problem = nil
}

// Op returns the operation name.
func (m *ProblemtypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Problemtype).
func (m *ProblemtypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProblemtypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._PROBLEMTYPE != nil {
		fields = append(fields, problemtype.FieldPROBLEMTYPE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProblemtypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problemtype.FieldPROBLEMTYPE:
		return m.PROBLEMTYPE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProblemtypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problemtype.FieldPROBLEMTYPE:
		return m.OldPROBLEMTYPE(ctx)
	}
	return nil, fmt.Errorf("unknown Problemtype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemtypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problemtype.FieldPROBLEMTYPE:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPROBLEMTYPE(v)
		return nil
	}
	return fmt.Errorf("unknown Problemtype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProblemtypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProblemtypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemtypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Problemtype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProblemtypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProblemtypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemtypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Problemtype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProblemtypeMutation) ResetField(name string) error {
	switch name {
	case problemtype.FieldPROBLEMTYPE:
		m.ResetPROBLEMTYPE()
		return nil
	}
	return fmt.Errorf("unknown Problemtype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProblemtypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Problem != nil {
		edges = append(edges, problemtype.EdgeProblem)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProblemtypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case problemtype.EdgeProblem:
		ids := make([]ent.Value, 0, len(m._Problem))
		for id := range m._Problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProblemtypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Problem != nil {
		edges = append(edges, problemtype.EdgeProblem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProblemtypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case problemtype.EdgeProblem:
		ids := make([]ent.Value, 0, len(m.removed_Problem))
		for id := range m.removed_Problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProblemtypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProblemtypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProblemtypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Problemtype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProblemtypeMutation) ResetEdge(name string) error {
	switch name {
	case problemtype.EdgeProblem:
		m.ResetProblem()
		return nil
	}
	return fmt.Errorf("unknown Problemtype edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_ROOMNUMBER     *int
	add_ROOMNUMBER  *int
	clearedFields   map[string]struct{}
	_Problem        map[int]struct{}
	removed_Problem map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetROOMNUMBER sets the ROOMNUMBER field.
func (m *RoomMutation) SetROOMNUMBER(i int) {
	m._ROOMNUMBER = &i
	m.add_ROOMNUMBER = nil
}

// ROOMNUMBER returns the ROOMNUMBER value in the mutation.
func (m *RoomMutation) ROOMNUMBER() (r int, exists bool) {
	v := m._ROOMNUMBER
	if v == nil {
		return
	}
	return *v, true
}

// OldROOMNUMBER returns the old ROOMNUMBER value of the Room.
// If the Room object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomMutation) OldROOMNUMBER(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldROOMNUMBER is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldROOMNUMBER requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldROOMNUMBER: %w", err)
	}
	return oldValue.ROOMNUMBER, nil
}

// AddROOMNUMBER adds i to ROOMNUMBER.
func (m *RoomMutation) AddROOMNUMBER(i int) {
	if m.add_ROOMNUMBER != nil {
		*m.add_ROOMNUMBER += i
	} else {
		m.add_ROOMNUMBER = &i
	}
}

// AddedROOMNUMBER returns the value that was added to the ROOMNUMBER field in this mutation.
func (m *RoomMutation) AddedROOMNUMBER() (r int, exists bool) {
	v := m.add_ROOMNUMBER
	if v == nil {
		return
	}
	return *v, true
}

// ResetROOMNUMBER reset all changes of the "ROOMNUMBER" field.
func (m *RoomMutation) ResetROOMNUMBER() {
	m._ROOMNUMBER = nil
	m.add_ROOMNUMBER = nil
}

// AddProblemIDs adds the Problem edge to Problem by ids.
func (m *RoomMutation) AddProblemIDs(ids ...int) {
	if m._Problem == nil {
		m._Problem = make(map[int]struct{})
	}
	for i := range ids {
		m._Problem[ids[i]] = struct{}{}
	}
}

// RemoveProblemIDs removes the Problem edge to Problem by ids.
func (m *RoomMutation) RemoveProblemIDs(ids ...int) {
	if m.removed_Problem == nil {
		m.removed_Problem = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Problem[ids[i]] = struct{}{}
	}
}

// RemovedProblem returns the removed ids of Problem.
func (m *RoomMutation) RemovedProblemIDs() (ids []int) {
	for id := range m.removed_Problem {
		ids = append(ids, id)
	}
	return
}

// ProblemIDs returns the Problem ids in the mutation.
func (m *RoomMutation) ProblemIDs() (ids []int) {
	for id := range m._Problem {
		ids = append(ids, id)
	}
	return
}

// ResetProblem reset all changes of the "Problem" edge.
func (m *RoomMutation) ResetProblem() {
	m._Problem = nil
	m.removed_Problem = nil
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._ROOMNUMBER != nil {
		fields = append(fields, room.FieldROOMNUMBER)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.ROOMNUMBER()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.OldROOMNUMBER(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldROOMNUMBER:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetROOMNUMBER(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	var fields []string
	if m.add_ROOMNUMBER != nil {
		fields = append(fields, room.FieldROOMNUMBER)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.AddedROOMNUMBER()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	case room.FieldROOMNUMBER:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddROOMNUMBER(v)
		return nil
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldROOMNUMBER:
		m.ResetROOMNUMBER()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Problem != nil {
		edges = append(edges, room.EdgeProblem)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeProblem:
		ids := make([]ent.Value, 0, len(m._Problem))
		for id := range m._Problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Problem != nil {
		edges = append(edges, room.EdgeProblem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeProblem:
		ids := make([]ent.Value, 0, len(m.removed_Problem))
		for id := range m.removed_Problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeProblem:
		m.ResetProblem()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}
