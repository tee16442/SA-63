// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tee16/app/ent/customer"
	"github.com/tee16/app/ent/problem"
	"github.com/tee16/app/ent/problemtype"
	"github.com/tee16/app/ent/room"
)

// ProblemCreate is the builder for creating a Problem entity.
type ProblemCreate struct {
	config
	mutation *ProblemMutation
	hooks    []Hook
}

// SetPROBLEMDETAIL sets the PROBLEMDETAIL field.
func (pc *ProblemCreate) SetPROBLEMDETAIL(s string) *ProblemCreate {
	pc.mutation.SetPROBLEMDETAIL(s)
	return pc
}

// SetProblemtypeID sets the Problemtype edge to Problemtype by id.
func (pc *ProblemCreate) SetProblemtypeID(id int) *ProblemCreate {
	pc.mutation.SetProblemtypeID(id)
	return pc
}

// SetNillableProblemtypeID sets the Problemtype edge to Problemtype by id if the given value is not nil.
func (pc *ProblemCreate) SetNillableProblemtypeID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetProblemtypeID(*id)
	}
	return pc
}

// SetProblemtype sets the Problemtype edge to Problemtype.
func (pc *ProblemCreate) SetProblemtype(p *Problemtype) *ProblemCreate {
	return pc.SetProblemtypeID(p.ID)
}

// SetRoomID sets the Room edge to Room by id.
func (pc *ProblemCreate) SetRoomID(id int) *ProblemCreate {
	pc.mutation.SetRoomID(id)
	return pc
}

// SetNillableRoomID sets the Room edge to Room by id if the given value is not nil.
func (pc *ProblemCreate) SetNillableRoomID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetRoomID(*id)
	}
	return pc
}

// SetRoom sets the Room edge to Room.
func (pc *ProblemCreate) SetRoom(r *Room) *ProblemCreate {
	return pc.SetRoomID(r.ID)
}

// SetCustomerID sets the Customer edge to Customer by id.
func (pc *ProblemCreate) SetCustomerID(id int) *ProblemCreate {
	pc.mutation.SetCustomerID(id)
	return pc
}

// SetNillableCustomerID sets the Customer edge to Customer by id if the given value is not nil.
func (pc *ProblemCreate) SetNillableCustomerID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetCustomerID(*id)
	}
	return pc
}

// SetCustomer sets the Customer edge to Customer.
func (pc *ProblemCreate) SetCustomer(c *Customer) *ProblemCreate {
	return pc.SetCustomerID(c.ID)
}

// Mutation returns the ProblemMutation object of the builder.
func (pc *ProblemCreate) Mutation() *ProblemMutation {
	return pc.mutation
}

// Save creates the Problem in the database.
func (pc *ProblemCreate) Save(ctx context.Context) (*Problem, error) {
	if _, ok := pc.mutation.PROBLEMDETAIL(); !ok {
		return nil, &ValidationError{Name: "PROBLEMDETAIL", err: errors.New("ent: missing required field \"PROBLEMDETAIL\"")}
	}
	var (
		err  error
		node *Problem
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProblemCreate) SaveX(ctx context.Context) *Problem {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProblemCreate) sqlSave(ctx context.Context) (*Problem, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProblemCreate) createSpec() (*Problem, *sqlgraph.CreateSpec) {
	var (
		pr    = &Problem{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: problem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problem.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.PROBLEMDETAIL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problem.FieldPROBLEMDETAIL,
		})
		pr.PROBLEMDETAIL = value
	}
	if nodes := pc.mutation.ProblemtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ProblemtypeTable,
			Columns: []string{problem.ProblemtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.RoomTable,
			Columns: []string{problem.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CustomerTable,
			Columns: []string{problem.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
