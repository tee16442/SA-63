// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tee16/app/ent/customer"
	"github.com/tee16/app/ent/problem"
	"github.com/tee16/app/ent/problemtype"
	"github.com/tee16/app/ent/room"
)

// Problem is the model entity for the Problem schema.
type Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PROBLEMDETAIL holds the value of the "PROBLEMDETAIL" field.
	PROBLEMDETAIL string `json:"PROBLEMDETAIL,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemQuery when eager-loading is set.
	Edges               ProblemEdges `json:"edges"`
	customer_problem    *int
	problemtype_problem *int
	room_problem        *int
}

// ProblemEdges holds the relations/edges for other nodes in the graph.
type ProblemEdges struct {
	// Problemtype holds the value of the Problemtype edge.
	Problemtype *Problemtype
	// Room holds the value of the Room edge.
	Room *Room
	// Customer holds the value of the Customer edge.
	Customer *Customer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProblemtypeOrErr returns the Problemtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) ProblemtypeOrErr() (*Problemtype, error) {
	if e.loadedTypes[0] {
		if e.Problemtype == nil {
			// The edge Problemtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: problemtype.Label}
		}
		return e.Problemtype, nil
	}
	return nil, &NotLoadedError{edge: "Problemtype"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[1] {
		if e.Room == nil {
			// The edge Room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "Room"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[2] {
		if e.Customer == nil {
			// The edge Customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "Customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problem) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PROBLEMDETAIL
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Problem) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // customer_problem
		&sql.NullInt64{}, // problemtype_problem
		&sql.NullInt64{}, // room_problem
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problem fields.
func (pr *Problem) assignValues(values ...interface{}) error {
	if m, n := len(values), len(problem.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PROBLEMDETAIL", values[0])
	} else if value.Valid {
		pr.PROBLEMDETAIL = value.String
	}
	values = values[1:]
	if len(values) == len(problem.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_problem", value)
		} else if value.Valid {
			pr.customer_problem = new(int)
			*pr.customer_problem = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field problemtype_problem", value)
		} else if value.Valid {
			pr.problemtype_problem = new(int)
			*pr.problemtype_problem = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_problem", value)
		} else if value.Valid {
			pr.room_problem = new(int)
			*pr.room_problem = int(value.Int64)
		}
	}
	return nil
}

// QueryProblemtype queries the Problemtype edge of the Problem.
func (pr *Problem) QueryProblemtype() *ProblemtypeQuery {
	return (&ProblemClient{config: pr.config}).QueryProblemtype(pr)
}

// QueryRoom queries the Room edge of the Problem.
func (pr *Problem) QueryRoom() *RoomQuery {
	return (&ProblemClient{config: pr.config}).QueryRoom(pr)
}

// QueryCustomer queries the Customer edge of the Problem.
func (pr *Problem) QueryCustomer() *CustomerQuery {
	return (&ProblemClient{config: pr.config}).QueryCustomer(pr)
}

// Update returns a builder for updating this Problem.
// Note that, you need to call Problem.Unwrap() before calling this method, if this Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problem) Update() *ProblemUpdateOne {
	return (&ProblemClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Problem) Unwrap() *Problem {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problem is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Problem(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", PROBLEMDETAIL=")
	builder.WriteString(pr.PROBLEMDETAIL)
	builder.WriteByte(')')
	return builder.String()
}

// Problems is a parsable slice of Problem.
type Problems []*Problem

func (pr Problems) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
