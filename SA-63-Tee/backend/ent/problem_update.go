// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tee16/app/ent/customer"
	"github.com/tee16/app/ent/predicate"
	"github.com/tee16/app/ent/problem"
	"github.com/tee16/app/ent/problemtype"
	"github.com/tee16/app/ent/room"
)

// ProblemUpdate is the builder for updating Problem entities.
type ProblemUpdate struct {
	config
	hooks      []Hook
	mutation   *ProblemMutation
	predicates []predicate.Problem
}

// Where adds a new predicate for the builder.
func (pu *ProblemUpdate) Where(ps ...predicate.Problem) *ProblemUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPROBLEMDETAIL sets the PROBLEMDETAIL field.
func (pu *ProblemUpdate) SetPROBLEMDETAIL(s string) *ProblemUpdate {
	pu.mutation.SetPROBLEMDETAIL(s)
	return pu
}

// SetProblemtypeID sets the Problemtype edge to Problemtype by id.
func (pu *ProblemUpdate) SetProblemtypeID(id int) *ProblemUpdate {
	pu.mutation.SetProblemtypeID(id)
	return pu
}

// SetNillableProblemtypeID sets the Problemtype edge to Problemtype by id if the given value is not nil.
func (pu *ProblemUpdate) SetNillableProblemtypeID(id *int) *ProblemUpdate {
	if id != nil {
		pu = pu.SetProblemtypeID(*id)
	}
	return pu
}

// SetProblemtype sets the Problemtype edge to Problemtype.
func (pu *ProblemUpdate) SetProblemtype(p *Problemtype) *ProblemUpdate {
	return pu.SetProblemtypeID(p.ID)
}

// SetRoomID sets the Room edge to Room by id.
func (pu *ProblemUpdate) SetRoomID(id int) *ProblemUpdate {
	pu.mutation.SetRoomID(id)
	return pu
}

// SetNillableRoomID sets the Room edge to Room by id if the given value is not nil.
func (pu *ProblemUpdate) SetNillableRoomID(id *int) *ProblemUpdate {
	if id != nil {
		pu = pu.SetRoomID(*id)
	}
	return pu
}

// SetRoom sets the Room edge to Room.
func (pu *ProblemUpdate) SetRoom(r *Room) *ProblemUpdate {
	return pu.SetRoomID(r.ID)
}

// SetCustomerID sets the Customer edge to Customer by id.
func (pu *ProblemUpdate) SetCustomerID(id int) *ProblemUpdate {
	pu.mutation.SetCustomerID(id)
	return pu
}

// SetNillableCustomerID sets the Customer edge to Customer by id if the given value is not nil.
func (pu *ProblemUpdate) SetNillableCustomerID(id *int) *ProblemUpdate {
	if id != nil {
		pu = pu.SetCustomerID(*id)
	}
	return pu
}

// SetCustomer sets the Customer edge to Customer.
func (pu *ProblemUpdate) SetCustomer(c *Customer) *ProblemUpdate {
	return pu.SetCustomerID(c.ID)
}

// Mutation returns the ProblemMutation object of the builder.
func (pu *ProblemUpdate) Mutation() *ProblemMutation {
	return pu.mutation
}

// ClearProblemtype clears the Problemtype edge to Problemtype.
func (pu *ProblemUpdate) ClearProblemtype() *ProblemUpdate {
	pu.mutation.ClearProblemtype()
	return pu
}

// ClearRoom clears the Room edge to Room.
func (pu *ProblemUpdate) ClearRoom() *ProblemUpdate {
	pu.mutation.ClearRoom()
	return pu
}

// ClearCustomer clears the Customer edge to Customer.
func (pu *ProblemUpdate) ClearCustomer() *ProblemUpdate {
	pu.mutation.ClearCustomer()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProblemUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProblemUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProblemUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   problem.Table,
			Columns: problem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problem.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PROBLEMDETAIL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problem.FieldPROBLEMDETAIL,
		})
	}
	if pu.mutation.ProblemtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ProblemtypeTable,
			Columns: []string{problem.ProblemtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProblemtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ProblemtypeTable,
			Columns: []string{problem.ProblemtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.RoomTable,
			Columns: []string{problem.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.RoomTable,
			Columns: []string{problem.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CustomerTable,
			Columns: []string{problem.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CustomerTable,
			Columns: []string{problem.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProblemUpdateOne is the builder for updating a single Problem entity.
type ProblemUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProblemMutation
}

// SetPROBLEMDETAIL sets the PROBLEMDETAIL field.
func (puo *ProblemUpdateOne) SetPROBLEMDETAIL(s string) *ProblemUpdateOne {
	puo.mutation.SetPROBLEMDETAIL(s)
	return puo
}

// SetProblemtypeID sets the Problemtype edge to Problemtype by id.
func (puo *ProblemUpdateOne) SetProblemtypeID(id int) *ProblemUpdateOne {
	puo.mutation.SetProblemtypeID(id)
	return puo
}

// SetNillableProblemtypeID sets the Problemtype edge to Problemtype by id if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableProblemtypeID(id *int) *ProblemUpdateOne {
	if id != nil {
		puo = puo.SetProblemtypeID(*id)
	}
	return puo
}

// SetProblemtype sets the Problemtype edge to Problemtype.
func (puo *ProblemUpdateOne) SetProblemtype(p *Problemtype) *ProblemUpdateOne {
	return puo.SetProblemtypeID(p.ID)
}

// SetRoomID sets the Room edge to Room by id.
func (puo *ProblemUpdateOne) SetRoomID(id int) *ProblemUpdateOne {
	puo.mutation.SetRoomID(id)
	return puo
}

// SetNillableRoomID sets the Room edge to Room by id if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableRoomID(id *int) *ProblemUpdateOne {
	if id != nil {
		puo = puo.SetRoomID(*id)
	}
	return puo
}

// SetRoom sets the Room edge to Room.
func (puo *ProblemUpdateOne) SetRoom(r *Room) *ProblemUpdateOne {
	return puo.SetRoomID(r.ID)
}

// SetCustomerID sets the Customer edge to Customer by id.
func (puo *ProblemUpdateOne) SetCustomerID(id int) *ProblemUpdateOne {
	puo.mutation.SetCustomerID(id)
	return puo
}

// SetNillableCustomerID sets the Customer edge to Customer by id if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableCustomerID(id *int) *ProblemUpdateOne {
	if id != nil {
		puo = puo.SetCustomerID(*id)
	}
	return puo
}

// SetCustomer sets the Customer edge to Customer.
func (puo *ProblemUpdateOne) SetCustomer(c *Customer) *ProblemUpdateOne {
	return puo.SetCustomerID(c.ID)
}

// Mutation returns the ProblemMutation object of the builder.
func (puo *ProblemUpdateOne) Mutation() *ProblemMutation {
	return puo.mutation
}

// ClearProblemtype clears the Problemtype edge to Problemtype.
func (puo *ProblemUpdateOne) ClearProblemtype() *ProblemUpdateOne {
	puo.mutation.ClearProblemtype()
	return puo
}

// ClearRoom clears the Room edge to Room.
func (puo *ProblemUpdateOne) ClearRoom() *ProblemUpdateOne {
	puo.mutation.ClearRoom()
	return puo
}

// ClearCustomer clears the Customer edge to Customer.
func (puo *ProblemUpdateOne) ClearCustomer() *ProblemUpdateOne {
	puo.mutation.ClearCustomer()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *ProblemUpdateOne) Save(ctx context.Context) (*Problem, error) {

	var (
		err  error
		node *Problem
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProblemUpdateOne) SaveX(ctx context.Context) *Problem {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProblemUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProblemUpdateOne) sqlSave(ctx context.Context) (pr *Problem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   problem.Table,
			Columns: problem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problem.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Problem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PROBLEMDETAIL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problem.FieldPROBLEMDETAIL,
		})
	}
	if puo.mutation.ProblemtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ProblemtypeTable,
			Columns: []string{problem.ProblemtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProblemtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ProblemtypeTable,
			Columns: []string{problem.ProblemtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.RoomTable,
			Columns: []string{problem.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.RoomTable,
			Columns: []string{problem.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CustomerTable,
			Columns: []string{problem.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CustomerTable,
			Columns: []string{problem.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Problem{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
