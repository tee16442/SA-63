// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/PBank/app/ent/promotion"
	"github.com/PBank/app/ent/room"
	"github.com/PBank/app/ent/roomstate"
	"github.com/PBank/app/ent/roomtype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ROOMNUMBER holds the value of the "ROOMNUMBER" field.
	ROOMNUMBER string `json:"ROOMNUMBER,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges           RoomEdges `json:"edges"`
	promotion_room2 *int
	roomstate_room3 *int
	roomtype_room1  *int
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Roomtype holds the value of the Roomtype edge.
	Roomtype *Roomtype
	// Promotion holds the value of the Promotion edge.
	Promotion *Promotion
	// Roomstate holds the value of the roomstate edge.
	Roomstate *Roomstate
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoomtypeOrErr returns the Roomtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) RoomtypeOrErr() (*Roomtype, error) {
	if e.loadedTypes[0] {
		if e.Roomtype == nil {
			// The edge Roomtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomtype.Label}
		}
		return e.Roomtype, nil
	}
	return nil, &NotLoadedError{edge: "Roomtype"}
}

// PromotionOrErr returns the Promotion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) PromotionOrErr() (*Promotion, error) {
	if e.loadedTypes[1] {
		if e.Promotion == nil {
			// The edge Promotion was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: promotion.Label}
		}
		return e.Promotion, nil
	}
	return nil, &NotLoadedError{edge: "Promotion"}
}

// RoomstateOrErr returns the Roomstate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) RoomstateOrErr() (*Roomstate, error) {
	if e.loadedTypes[2] {
		if e.Roomstate == nil {
			// The edge roomstate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomstate.Label}
		}
		return e.Roomstate, nil
	}
	return nil, &NotLoadedError{edge: "roomstate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // ROOMNUMBER
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Room) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // promotion_room2
		&sql.NullInt64{}, // roomstate_room3
		&sql.NullInt64{}, // roomtype_room1
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(values ...interface{}) error {
	if m, n := len(values), len(room.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ROOMNUMBER", values[0])
	} else if value.Valid {
		r.ROOMNUMBER = value.String
	}
	values = values[1:]
	if len(values) == len(room.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field promotion_room2", value)
		} else if value.Valid {
			r.promotion_room2 = new(int)
			*r.promotion_room2 = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomstate_room3", value)
		} else if value.Valid {
			r.roomstate_room3 = new(int)
			*r.roomstate_room3 = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomtype_room1", value)
		} else if value.Valid {
			r.roomtype_room1 = new(int)
			*r.roomtype_room1 = int(value.Int64)
		}
	}
	return nil
}

// QueryRoomtype queries the Roomtype edge of the Room.
func (r *Room) QueryRoomtype() *RoomtypeQuery {
	return (&RoomClient{config: r.config}).QueryRoomtype(r)
}

// QueryPromotion queries the Promotion edge of the Room.
func (r *Room) QueryPromotion() *PromotionQuery {
	return (&RoomClient{config: r.config}).QueryPromotion(r)
}

// QueryRoomstate queries the roomstate edge of the Room.
func (r *Room) QueryRoomstate() *RoomstateQuery {
	return (&RoomClient{config: r.config}).QueryRoomstate(r)
}

// Update returns a builder for updating this Room.
// Note that, you need to call Room.Unwrap() before calling this method, if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return (&RoomClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", ROOMNUMBER=")
	builder.WriteString(r.ROOMNUMBER)
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room

func (r Rooms) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
