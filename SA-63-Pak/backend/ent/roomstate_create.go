// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/PBank/app/ent/room"
	"github.com/PBank/app/ent/roomstate"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoomstateCreate is the builder for creating a Roomstate entity.
type RoomstateCreate struct {
	config
	mutation *RoomstateMutation
	hooks    []Hook
}

// SetROOMSTATE sets the ROOMSTATE field.
func (rc *RoomstateCreate) SetROOMSTATE(s string) *RoomstateCreate {
	rc.mutation.SetROOMSTATE(s)
	return rc
}

// AddRoom3IDs adds the Room3 edge to Room by ids.
func (rc *RoomstateCreate) AddRoom3IDs(ids ...int) *RoomstateCreate {
	rc.mutation.AddRoom3IDs(ids...)
	return rc
}

// AddRoom3 adds the Room3 edges to Room.
func (rc *RoomstateCreate) AddRoom3(r ...*Room) *RoomstateCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRoom3IDs(ids...)
}

// Mutation returns the RoomstateMutation object of the builder.
func (rc *RoomstateCreate) Mutation() *RoomstateMutation {
	return rc.mutation
}

// Save creates the Roomstate in the database.
func (rc *RoomstateCreate) Save(ctx context.Context) (*Roomstate, error) {
	if _, ok := rc.mutation.ROOMSTATE(); !ok {
		return nil, &ValidationError{Name: "ROOMSTATE", err: errors.New("ent: missing required field \"ROOMSTATE\"")}
	}
	if v, ok := rc.mutation.ROOMSTATE(); ok {
		if err := roomstate.ROOMSTATEValidator(v); err != nil {
			return nil, &ValidationError{Name: "ROOMSTATE", err: fmt.Errorf("ent: validator failed for field \"ROOMSTATE\": %w", err)}
		}
	}
	var (
		err  error
		node *Roomstate
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomstateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoomstateCreate) SaveX(ctx context.Context) *Roomstate {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoomstateCreate) sqlSave(ctx context.Context) (*Roomstate, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RoomstateCreate) createSpec() (*Roomstate, *sqlgraph.CreateSpec) {
	var (
		r     = &Roomstate{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roomstate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomstate.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.ROOMSTATE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomstate.FieldROOMSTATE,
		})
		r.ROOMSTATE = value
	}
	if nodes := rc.mutation.Room3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomstate.Room3Table,
			Columns: []string{roomstate.Room3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
