// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/PBank/app/ent/promotion"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Promotion is the model entity for the Promotion schema.
type Promotion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PROMOTIONDETAIL holds the value of the "PROMOTIONDETAIL" field.
	PROMOTIONDETAIL string `json:"PROMOTIONDETAIL,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionQuery when eager-loading is set.
	Edges PromotionEdges `json:"edges"`
}

// PromotionEdges holds the relations/edges for other nodes in the graph.
type PromotionEdges struct {
	// Room2 holds the value of the Room2 edge.
	Room2 []*Room
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Room2OrErr returns the Room2 value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionEdges) Room2OrErr() ([]*Room, error) {
	if e.loadedTypes[0] {
		return e.Room2, nil
	}
	return nil, &NotLoadedError{edge: "Room2"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotion) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PROMOTIONDETAIL
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotion fields.
func (pr *Promotion) assignValues(values ...interface{}) error {
	if m, n := len(values), len(promotion.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PROMOTIONDETAIL", values[0])
	} else if value.Valid {
		pr.PROMOTIONDETAIL = value.String
	}
	return nil
}

// QueryRoom2 queries the Room2 edge of the Promotion.
func (pr *Promotion) QueryRoom2() *RoomQuery {
	return (&PromotionClient{config: pr.config}).QueryRoom2(pr)
}

// Update returns a builder for updating this Promotion.
// Note that, you need to call Promotion.Unwrap() before calling this method, if this Promotion
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotion) Update() *PromotionUpdateOne {
	return (&PromotionClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Promotion) Unwrap() *Promotion {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotion is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotion) String() string {
	var builder strings.Builder
	builder.WriteString("Promotion(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", PROMOTIONDETAIL=")
	builder.WriteString(pr.PROMOTIONDETAIL)
	builder.WriteByte(')')
	return builder.String()
}

// Promotions is a parsable slice of Promotion.
type Promotions []*Promotion

func (pr Promotions) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
