// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/PBank/app/ent/promotion"
	"github.com/PBank/app/ent/room"
	"github.com/PBank/app/ent/roomstate"
	"github.com/PBank/app/ent/roomtype"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePromotion = "Promotion"
	TypeRoom      = "Room"
	TypeRoomstate = "Roomstate"
	TypeRoomtype  = "Roomtype"
)

// PromotionMutation represents an operation that mutate the Promotions
// nodes in the graph.
type PromotionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_PROMOTIONDETAIL *string
	clearedFields    map[string]struct{}
	_Room2           map[int]struct{}
	removed_Room2    map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Promotion, error)
}

var _ ent.Mutation = (*PromotionMutation)(nil)

// promotionOption allows to manage the mutation configuration using functional options.
type promotionOption func(*PromotionMutation)

// newPromotionMutation creates new mutation for $n.Name.
func newPromotionMutation(c config, op Op, opts ...promotionOption) *PromotionMutation {
	m := &PromotionMutation{
		config:        c,
		op:            op,
		typ:           TypePromotion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPromotionID sets the id field of the mutation.
func withPromotionID(id int) promotionOption {
	return func(m *PromotionMutation) {
		var (
			err   error
			once  sync.Once
			value *Promotion
		)
		m.oldValue = func(ctx context.Context) (*Promotion, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Promotion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPromotion sets the old Promotion of the mutation.
func withPromotion(node *Promotion) promotionOption {
	return func(m *PromotionMutation) {
		m.oldValue = func(context.Context) (*Promotion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PromotionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PromotionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PromotionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPROMOTIONDETAIL sets the PROMOTIONDETAIL field.
func (m *PromotionMutation) SetPROMOTIONDETAIL(s string) {
	m._PROMOTIONDETAIL = &s
}

// PROMOTIONDETAIL returns the PROMOTIONDETAIL value in the mutation.
func (m *PromotionMutation) PROMOTIONDETAIL() (r string, exists bool) {
	v := m._PROMOTIONDETAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldPROMOTIONDETAIL returns the old PROMOTIONDETAIL value of the Promotion.
// If the Promotion object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PromotionMutation) OldPROMOTIONDETAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPROMOTIONDETAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPROMOTIONDETAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPROMOTIONDETAIL: %w", err)
	}
	return oldValue.PROMOTIONDETAIL, nil
}

// ResetPROMOTIONDETAIL reset all changes of the "PROMOTIONDETAIL" field.
func (m *PromotionMutation) ResetPROMOTIONDETAIL() {
	m._PROMOTIONDETAIL = nil
}

// AddRoom2IDs adds the Room2 edge to Room by ids.
func (m *PromotionMutation) AddRoom2IDs(ids ...int) {
	if m._Room2 == nil {
		m._Room2 = make(map[int]struct{})
	}
	for i := range ids {
		m._Room2[ids[i]] = struct{}{}
	}
}

// RemoveRoom2IDs removes the Room2 edge to Room by ids.
func (m *PromotionMutation) RemoveRoom2IDs(ids ...int) {
	if m.removed_Room2 == nil {
		m.removed_Room2 = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Room2[ids[i]] = struct{}{}
	}
}

// RemovedRoom2 returns the removed ids of Room2.
func (m *PromotionMutation) RemovedRoom2IDs() (ids []int) {
	for id := range m.removed_Room2 {
		ids = append(ids, id)
	}
	return
}

// Room2IDs returns the Room2 ids in the mutation.
func (m *PromotionMutation) Room2IDs() (ids []int) {
	for id := range m._Room2 {
		ids = append(ids, id)
	}
	return
}

// ResetRoom2 reset all changes of the "Room2" edge.
func (m *PromotionMutation) ResetRoom2() {
	m._Room2 = nil
	m.removed_Room2 = nil
}

// Op returns the operation name.
func (m *PromotionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Promotion).
func (m *PromotionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PromotionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._PROMOTIONDETAIL != nil {
		fields = append(fields, promotion.FieldPROMOTIONDETAIL)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PromotionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case promotion.FieldPROMOTIONDETAIL:
		return m.PROMOTIONDETAIL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PromotionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case promotion.FieldPROMOTIONDETAIL:
		return m.OldPROMOTIONDETAIL(ctx)
	}
	return nil, fmt.Errorf("unknown Promotion field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PromotionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case promotion.FieldPROMOTIONDETAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPROMOTIONDETAIL(v)
		return nil
	}
	return fmt.Errorf("unknown Promotion field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PromotionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PromotionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PromotionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Promotion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PromotionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PromotionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PromotionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Promotion nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PromotionMutation) ResetField(name string) error {
	switch name {
	case promotion.FieldPROMOTIONDETAIL:
		m.ResetPROMOTIONDETAIL()
		return nil
	}
	return fmt.Errorf("unknown Promotion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PromotionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Room2 != nil {
		edges = append(edges, promotion.EdgeRoom2)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PromotionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case promotion.EdgeRoom2:
		ids := make([]ent.Value, 0, len(m._Room2))
		for id := range m._Room2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PromotionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Room2 != nil {
		edges = append(edges, promotion.EdgeRoom2)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PromotionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case promotion.EdgeRoom2:
		ids := make([]ent.Value, 0, len(m.removed_Room2))
		for id := range m.removed_Room2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PromotionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PromotionMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PromotionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Promotion unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PromotionMutation) ResetEdge(name string) error {
	switch name {
	case promotion.EdgeRoom2:
		m.ResetRoom2()
		return nil
	}
	return fmt.Errorf("unknown Promotion edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_ROOMNUMBER       *string
	clearedFields     map[string]struct{}
	_Roomtype         *int
	cleared_Roomtype  bool
	_Promotion        *int
	cleared_Promotion bool
	roomstate         *int
	clearedroomstate  bool
	done              bool
	oldValue          func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetROOMNUMBER sets the ROOMNUMBER field.
func (m *RoomMutation) SetROOMNUMBER(s string) {
	m._ROOMNUMBER = &s
}

// ROOMNUMBER returns the ROOMNUMBER value in the mutation.
func (m *RoomMutation) ROOMNUMBER() (r string, exists bool) {
	v := m._ROOMNUMBER
	if v == nil {
		return
	}
	return *v, true
}

// OldROOMNUMBER returns the old ROOMNUMBER value of the Room.
// If the Room object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomMutation) OldROOMNUMBER(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldROOMNUMBER is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldROOMNUMBER requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldROOMNUMBER: %w", err)
	}
	return oldValue.ROOMNUMBER, nil
}

// ResetROOMNUMBER reset all changes of the "ROOMNUMBER" field.
func (m *RoomMutation) ResetROOMNUMBER() {
	m._ROOMNUMBER = nil
}

// SetRoomtypeID sets the Roomtype edge to Roomtype by id.
func (m *RoomMutation) SetRoomtypeID(id int) {
	m._Roomtype = &id
}

// ClearRoomtype clears the Roomtype edge to Roomtype.
func (m *RoomMutation) ClearRoomtype() {
	m.cleared_Roomtype = true
}

// RoomtypeCleared returns if the edge Roomtype was cleared.
func (m *RoomMutation) RoomtypeCleared() bool {
	return m.cleared_Roomtype
}

// RoomtypeID returns the Roomtype id in the mutation.
func (m *RoomMutation) RoomtypeID() (id int, exists bool) {
	if m._Roomtype != nil {
		return *m._Roomtype, true
	}
	return
}

// RoomtypeIDs returns the Roomtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomtypeID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) RoomtypeIDs() (ids []int) {
	if id := m._Roomtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoomtype reset all changes of the "Roomtype" edge.
func (m *RoomMutation) ResetRoomtype() {
	m._Roomtype = nil
	m.cleared_Roomtype = false
}

// SetPromotionID sets the Promotion edge to Promotion by id.
func (m *RoomMutation) SetPromotionID(id int) {
	m._Promotion = &id
}

// ClearPromotion clears the Promotion edge to Promotion.
func (m *RoomMutation) ClearPromotion() {
	m.cleared_Promotion = true
}

// PromotionCleared returns if the edge Promotion was cleared.
func (m *RoomMutation) PromotionCleared() bool {
	return m.cleared_Promotion
}

// PromotionID returns the Promotion id in the mutation.
func (m *RoomMutation) PromotionID() (id int, exists bool) {
	if m._Promotion != nil {
		return *m._Promotion, true
	}
	return
}

// PromotionIDs returns the Promotion ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PromotionID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) PromotionIDs() (ids []int) {
	if id := m._Promotion; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPromotion reset all changes of the "Promotion" edge.
func (m *RoomMutation) ResetPromotion() {
	m._Promotion = nil
	m.cleared_Promotion = false
}

// SetRoomstateID sets the roomstate edge to Roomstate by id.
func (m *RoomMutation) SetRoomstateID(id int) {
	m.roomstate = &id
}

// ClearRoomstate clears the roomstate edge to Roomstate.
func (m *RoomMutation) ClearRoomstate() {
	m.clearedroomstate = true
}

// RoomstateCleared returns if the edge roomstate was cleared.
func (m *RoomMutation) RoomstateCleared() bool {
	return m.clearedroomstate
}

// RoomstateID returns the roomstate id in the mutation.
func (m *RoomMutation) RoomstateID() (id int, exists bool) {
	if m.roomstate != nil {
		return *m.roomstate, true
	}
	return
}

// RoomstateIDs returns the roomstate ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomstateID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) RoomstateIDs() (ids []int) {
	if id := m.roomstate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoomstate reset all changes of the "roomstate" edge.
func (m *RoomMutation) ResetRoomstate() {
	m.roomstate = nil
	m.clearedroomstate = false
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._ROOMNUMBER != nil {
		fields = append(fields, room.FieldROOMNUMBER)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.ROOMNUMBER()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldROOMNUMBER:
		return m.OldROOMNUMBER(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldROOMNUMBER:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetROOMNUMBER(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldROOMNUMBER:
		m.ResetROOMNUMBER()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Roomtype != nil {
		edges = append(edges, room.EdgeRoomtype)
	}
	if m._Promotion != nil {
		edges = append(edges, room.EdgePromotion)
	}
	if m.roomstate != nil {
		edges = append(edges, room.EdgeRoomstate)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeRoomtype:
		if id := m._Roomtype; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgePromotion:
		if id := m._Promotion; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeRoomstate:
		if id := m.roomstate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Roomtype {
		edges = append(edges, room.EdgeRoomtype)
	}
	if m.cleared_Promotion {
		edges = append(edges, room.EdgePromotion)
	}
	if m.clearedroomstate {
		edges = append(edges, room.EdgeRoomstate)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeRoomtype:
		return m.cleared_Roomtype
	case room.EdgePromotion:
		return m.cleared_Promotion
	case room.EdgeRoomstate:
		return m.clearedroomstate
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeRoomtype:
		m.ClearRoomtype()
		return nil
	case room.EdgePromotion:
		m.ClearPromotion()
		return nil
	case room.EdgeRoomstate:
		m.ClearRoomstate()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeRoomtype:
		m.ResetRoomtype()
		return nil
	case room.EdgePromotion:
		m.ResetPromotion()
		return nil
	case room.EdgeRoomstate:
		m.ResetRoomstate()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// RoomstateMutation represents an operation that mutate the Roomstates
// nodes in the graph.
type RoomstateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_ROOMSTATE    *string
	clearedFields map[string]struct{}
	_Room3        map[int]struct{}
	removed_Room3 map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Roomstate, error)
}

var _ ent.Mutation = (*RoomstateMutation)(nil)

// roomstateOption allows to manage the mutation configuration using functional options.
type roomstateOption func(*RoomstateMutation)

// newRoomstateMutation creates new mutation for $n.Name.
func newRoomstateMutation(c config, op Op, opts ...roomstateOption) *RoomstateMutation {
	m := &RoomstateMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomstate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomstateID sets the id field of the mutation.
func withRoomstateID(id int) roomstateOption {
	return func(m *RoomstateMutation) {
		var (
			err   error
			once  sync.Once
			value *Roomstate
		)
		m.oldValue = func(ctx context.Context) (*Roomstate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Roomstate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomstate sets the old Roomstate of the mutation.
func withRoomstate(node *Roomstate) roomstateOption {
	return func(m *RoomstateMutation) {
		m.oldValue = func(context.Context) (*Roomstate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomstateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomstateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomstateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetROOMSTATE sets the ROOMSTATE field.
func (m *RoomstateMutation) SetROOMSTATE(s string) {
	m._ROOMSTATE = &s
}

// ROOMSTATE returns the ROOMSTATE value in the mutation.
func (m *RoomstateMutation) ROOMSTATE() (r string, exists bool) {
	v := m._ROOMSTATE
	if v == nil {
		return
	}
	return *v, true
}

// OldROOMSTATE returns the old ROOMSTATE value of the Roomstate.
// If the Roomstate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomstateMutation) OldROOMSTATE(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldROOMSTATE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldROOMSTATE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldROOMSTATE: %w", err)
	}
	return oldValue.ROOMSTATE, nil
}

// ResetROOMSTATE reset all changes of the "ROOMSTATE" field.
func (m *RoomstateMutation) ResetROOMSTATE() {
	m._ROOMSTATE = nil
}

// AddRoom3IDs adds the Room3 edge to Room by ids.
func (m *RoomstateMutation) AddRoom3IDs(ids ...int) {
	if m._Room3 == nil {
		m._Room3 = make(map[int]struct{})
	}
	for i := range ids {
		m._Room3[ids[i]] = struct{}{}
	}
}

// RemoveRoom3IDs removes the Room3 edge to Room by ids.
func (m *RoomstateMutation) RemoveRoom3IDs(ids ...int) {
	if m.removed_Room3 == nil {
		m.removed_Room3 = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Room3[ids[i]] = struct{}{}
	}
}

// RemovedRoom3 returns the removed ids of Room3.
func (m *RoomstateMutation) RemovedRoom3IDs() (ids []int) {
	for id := range m.removed_Room3 {
		ids = append(ids, id)
	}
	return
}

// Room3IDs returns the Room3 ids in the mutation.
func (m *RoomstateMutation) Room3IDs() (ids []int) {
	for id := range m._Room3 {
		ids = append(ids, id)
	}
	return
}

// ResetRoom3 reset all changes of the "Room3" edge.
func (m *RoomstateMutation) ResetRoom3() {
	m._Room3 = nil
	m.removed_Room3 = nil
}

// Op returns the operation name.
func (m *RoomstateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Roomstate).
func (m *RoomstateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomstateMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._ROOMSTATE != nil {
		fields = append(fields, roomstate.FieldROOMSTATE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomstateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomstate.FieldROOMSTATE:
		return m.ROOMSTATE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomstateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomstate.FieldROOMSTATE:
		return m.OldROOMSTATE(ctx)
	}
	return nil, fmt.Errorf("unknown Roomstate field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomstateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomstate.FieldROOMSTATE:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetROOMSTATE(v)
		return nil
	}
	return fmt.Errorf("unknown Roomstate field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomstateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomstateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomstateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Roomstate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomstateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomstateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomstateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Roomstate nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomstateMutation) ResetField(name string) error {
	switch name {
	case roomstate.FieldROOMSTATE:
		m.ResetROOMSTATE()
		return nil
	}
	return fmt.Errorf("unknown Roomstate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomstateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Room3 != nil {
		edges = append(edges, roomstate.EdgeRoom3)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomstateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomstate.EdgeRoom3:
		ids := make([]ent.Value, 0, len(m._Room3))
		for id := range m._Room3 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomstateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Room3 != nil {
		edges = append(edges, roomstate.EdgeRoom3)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomstateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomstate.EdgeRoom3:
		ids := make([]ent.Value, 0, len(m.removed_Room3))
		for id := range m.removed_Room3 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomstateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomstateMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomstateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Roomstate unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomstateMutation) ResetEdge(name string) error {
	switch name {
	case roomstate.EdgeRoom3:
		m.ResetRoom3()
		return nil
	}
	return fmt.Errorf("unknown Roomstate edge %s", name)
}

// RoomtypeMutation represents an operation that mutate the Roomtypes
// nodes in the graph.
type RoomtypeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_ROOMPRICE    *int
	add_ROOMPRICE *int
	_TYPEDEATAIL  *string
	clearedFields map[string]struct{}
	_Room1        map[int]struct{}
	removed_Room1 map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Roomtype, error)
}

var _ ent.Mutation = (*RoomtypeMutation)(nil)

// roomtypeOption allows to manage the mutation configuration using functional options.
type roomtypeOption func(*RoomtypeMutation)

// newRoomtypeMutation creates new mutation for $n.Name.
func newRoomtypeMutation(c config, op Op, opts ...roomtypeOption) *RoomtypeMutation {
	m := &RoomtypeMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomtype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomtypeID sets the id field of the mutation.
func withRoomtypeID(id int) roomtypeOption {
	return func(m *RoomtypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Roomtype
		)
		m.oldValue = func(ctx context.Context) (*Roomtype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Roomtype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomtype sets the old Roomtype of the mutation.
func withRoomtype(node *Roomtype) roomtypeOption {
	return func(m *RoomtypeMutation) {
		m.oldValue = func(context.Context) (*Roomtype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomtypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomtypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomtypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetROOMPRICE sets the ROOMPRICE field.
func (m *RoomtypeMutation) SetROOMPRICE(i int) {
	m._ROOMPRICE = &i
	m.add_ROOMPRICE = nil
}

// ROOMPRICE returns the ROOMPRICE value in the mutation.
func (m *RoomtypeMutation) ROOMPRICE() (r int, exists bool) {
	v := m._ROOMPRICE
	if v == nil {
		return
	}
	return *v, true
}

// OldROOMPRICE returns the old ROOMPRICE value of the Roomtype.
// If the Roomtype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomtypeMutation) OldROOMPRICE(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldROOMPRICE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldROOMPRICE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldROOMPRICE: %w", err)
	}
	return oldValue.ROOMPRICE, nil
}

// AddROOMPRICE adds i to ROOMPRICE.
func (m *RoomtypeMutation) AddROOMPRICE(i int) {
	if m.add_ROOMPRICE != nil {
		*m.add_ROOMPRICE += i
	} else {
		m.add_ROOMPRICE = &i
	}
}

// AddedROOMPRICE returns the value that was added to the ROOMPRICE field in this mutation.
func (m *RoomtypeMutation) AddedROOMPRICE() (r int, exists bool) {
	v := m.add_ROOMPRICE
	if v == nil {
		return
	}
	return *v, true
}

// ResetROOMPRICE reset all changes of the "ROOMPRICE" field.
func (m *RoomtypeMutation) ResetROOMPRICE() {
	m._ROOMPRICE = nil
	m.add_ROOMPRICE = nil
}

// SetTYPEDEATAIL sets the TYPEDEATAIL field.
func (m *RoomtypeMutation) SetTYPEDEATAIL(s string) {
	m._TYPEDEATAIL = &s
}

// TYPEDEATAIL returns the TYPEDEATAIL value in the mutation.
func (m *RoomtypeMutation) TYPEDEATAIL() (r string, exists bool) {
	v := m._TYPEDEATAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldTYPEDEATAIL returns the old TYPEDEATAIL value of the Roomtype.
// If the Roomtype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomtypeMutation) OldTYPEDEATAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTYPEDEATAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTYPEDEATAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTYPEDEATAIL: %w", err)
	}
	return oldValue.TYPEDEATAIL, nil
}

// ResetTYPEDEATAIL reset all changes of the "TYPEDEATAIL" field.
func (m *RoomtypeMutation) ResetTYPEDEATAIL() {
	m._TYPEDEATAIL = nil
}

// AddRoom1IDs adds the Room1 edge to Room by ids.
func (m *RoomtypeMutation) AddRoom1IDs(ids ...int) {
	if m._Room1 == nil {
		m._Room1 = make(map[int]struct{})
	}
	for i := range ids {
		m._Room1[ids[i]] = struct{}{}
	}
}

// RemoveRoom1IDs removes the Room1 edge to Room by ids.
func (m *RoomtypeMutation) RemoveRoom1IDs(ids ...int) {
	if m.removed_Room1 == nil {
		m.removed_Room1 = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Room1[ids[i]] = struct{}{}
	}
}

// RemovedRoom1 returns the removed ids of Room1.
func (m *RoomtypeMutation) RemovedRoom1IDs() (ids []int) {
	for id := range m.removed_Room1 {
		ids = append(ids, id)
	}
	return
}

// Room1IDs returns the Room1 ids in the mutation.
func (m *RoomtypeMutation) Room1IDs() (ids []int) {
	for id := range m._Room1 {
		ids = append(ids, id)
	}
	return
}

// ResetRoom1 reset all changes of the "Room1" edge.
func (m *RoomtypeMutation) ResetRoom1() {
	m._Room1 = nil
	m.removed_Room1 = nil
}

// Op returns the operation name.
func (m *RoomtypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Roomtype).
func (m *RoomtypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomtypeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._ROOMPRICE != nil {
		fields = append(fields, roomtype.FieldROOMPRICE)
	}
	if m._TYPEDEATAIL != nil {
		fields = append(fields, roomtype.FieldTYPEDEATAIL)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomtypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldROOMPRICE:
		return m.ROOMPRICE()
	case roomtype.FieldTYPEDEATAIL:
		return m.TYPEDEATAIL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomtypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomtype.FieldROOMPRICE:
		return m.OldROOMPRICE(ctx)
	case roomtype.FieldTYPEDEATAIL:
		return m.OldTYPEDEATAIL(ctx)
	}
	return nil, fmt.Errorf("unknown Roomtype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomtypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldROOMPRICE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetROOMPRICE(v)
		return nil
	case roomtype.FieldTYPEDEATAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTYPEDEATAIL(v)
		return nil
	}
	return fmt.Errorf("unknown Roomtype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomtypeMutation) AddedFields() []string {
	var fields []string
	if m.add_ROOMPRICE != nil {
		fields = append(fields, roomtype.FieldROOMPRICE)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomtypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldROOMPRICE:
		return m.AddedROOMPRICE()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomtypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldROOMPRICE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddROOMPRICE(v)
		return nil
	}
	return fmt.Errorf("unknown Roomtype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomtypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomtypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomtypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Roomtype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomtypeMutation) ResetField(name string) error {
	switch name {
	case roomtype.FieldROOMPRICE:
		m.ResetROOMPRICE()
		return nil
	case roomtype.FieldTYPEDEATAIL:
		m.ResetTYPEDEATAIL()
		return nil
	}
	return fmt.Errorf("unknown Roomtype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomtypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Room1 != nil {
		edges = append(edges, roomtype.EdgeRoom1)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomtypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeRoom1:
		ids := make([]ent.Value, 0, len(m._Room1))
		for id := range m._Room1 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomtypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Room1 != nil {
		edges = append(edges, roomtype.EdgeRoom1)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomtypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeRoom1:
		ids := make([]ent.Value, 0, len(m.removed_Room1))
		for id := range m.removed_Room1 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomtypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomtypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomtypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Roomtype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomtypeMutation) ResetEdge(name string) error {
	switch name {
	case roomtype.EdgeRoom1:
		m.ResetRoom1()
		return nil
	}
	return fmt.Errorf("unknown Roomtype edge %s", name)
}
