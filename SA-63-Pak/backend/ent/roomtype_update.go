// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/PBank/app/ent/predicate"
	"github.com/PBank/app/ent/room"
	"github.com/PBank/app/ent/roomtype"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoomtypeUpdate is the builder for updating Roomtype entities.
type RoomtypeUpdate struct {
	config
	hooks      []Hook
	mutation   *RoomtypeMutation
	predicates []predicate.Roomtype
}

// Where adds a new predicate for the builder.
func (ru *RoomtypeUpdate) Where(ps ...predicate.Roomtype) *RoomtypeUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetROOMPRICE sets the ROOMPRICE field.
func (ru *RoomtypeUpdate) SetROOMPRICE(i int) *RoomtypeUpdate {
	ru.mutation.ResetROOMPRICE()
	ru.mutation.SetROOMPRICE(i)
	return ru
}

// AddROOMPRICE adds i to ROOMPRICE.
func (ru *RoomtypeUpdate) AddROOMPRICE(i int) *RoomtypeUpdate {
	ru.mutation.AddROOMPRICE(i)
	return ru
}

// SetTYPEDEATAIL sets the TYPEDEATAIL field.
func (ru *RoomtypeUpdate) SetTYPEDEATAIL(s string) *RoomtypeUpdate {
	ru.mutation.SetTYPEDEATAIL(s)
	return ru
}

// AddRoom1IDs adds the Room1 edge to Room by ids.
func (ru *RoomtypeUpdate) AddRoom1IDs(ids ...int) *RoomtypeUpdate {
	ru.mutation.AddRoom1IDs(ids...)
	return ru
}

// AddRoom1 adds the Room1 edges to Room.
func (ru *RoomtypeUpdate) AddRoom1(r ...*Room) *RoomtypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRoom1IDs(ids...)
}

// Mutation returns the RoomtypeMutation object of the builder.
func (ru *RoomtypeUpdate) Mutation() *RoomtypeMutation {
	return ru.mutation
}

// RemoveRoom1IDs removes the Room1 edge to Room by ids.
func (ru *RoomtypeUpdate) RemoveRoom1IDs(ids ...int) *RoomtypeUpdate {
	ru.mutation.RemoveRoom1IDs(ids...)
	return ru
}

// RemoveRoom1 removes Room1 edges to Room.
func (ru *RoomtypeUpdate) RemoveRoom1(r ...*Room) *RoomtypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRoom1IDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RoomtypeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.TYPEDEATAIL(); ok {
		if err := roomtype.TYPEDEATAILValidator(v); err != nil {
			return 0, &ValidationError{Name: "TYPEDEATAIL", err: fmt.Errorf("ent: validator failed for field \"TYPEDEATAIL\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomtypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomtypeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomtypeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoomtypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomtype.Table,
			Columns: roomtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomtype.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ROOMPRICE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomtype.FieldROOMPRICE,
		})
	}
	if value, ok := ru.mutation.AddedROOMPRICE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomtype.FieldROOMPRICE,
		})
	}
	if value, ok := ru.mutation.TYPEDEATAIL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomtype.FieldTYPEDEATAIL,
		})
	}
	if nodes := ru.mutation.RemovedRoom1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomtype.Room1Table,
			Columns: []string{roomtype.Room1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.Room1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomtype.Room1Table,
			Columns: []string{roomtype.Room1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoomtypeUpdateOne is the builder for updating a single Roomtype entity.
type RoomtypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoomtypeMutation
}

// SetROOMPRICE sets the ROOMPRICE field.
func (ruo *RoomtypeUpdateOne) SetROOMPRICE(i int) *RoomtypeUpdateOne {
	ruo.mutation.ResetROOMPRICE()
	ruo.mutation.SetROOMPRICE(i)
	return ruo
}

// AddROOMPRICE adds i to ROOMPRICE.
func (ruo *RoomtypeUpdateOne) AddROOMPRICE(i int) *RoomtypeUpdateOne {
	ruo.mutation.AddROOMPRICE(i)
	return ruo
}

// SetTYPEDEATAIL sets the TYPEDEATAIL field.
func (ruo *RoomtypeUpdateOne) SetTYPEDEATAIL(s string) *RoomtypeUpdateOne {
	ruo.mutation.SetTYPEDEATAIL(s)
	return ruo
}

// AddRoom1IDs adds the Room1 edge to Room by ids.
func (ruo *RoomtypeUpdateOne) AddRoom1IDs(ids ...int) *RoomtypeUpdateOne {
	ruo.mutation.AddRoom1IDs(ids...)
	return ruo
}

// AddRoom1 adds the Room1 edges to Room.
func (ruo *RoomtypeUpdateOne) AddRoom1(r ...*Room) *RoomtypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRoom1IDs(ids...)
}

// Mutation returns the RoomtypeMutation object of the builder.
func (ruo *RoomtypeUpdateOne) Mutation() *RoomtypeMutation {
	return ruo.mutation
}

// RemoveRoom1IDs removes the Room1 edge to Room by ids.
func (ruo *RoomtypeUpdateOne) RemoveRoom1IDs(ids ...int) *RoomtypeUpdateOne {
	ruo.mutation.RemoveRoom1IDs(ids...)
	return ruo
}

// RemoveRoom1 removes Room1 edges to Room.
func (ruo *RoomtypeUpdateOne) RemoveRoom1(r ...*Room) *RoomtypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRoom1IDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RoomtypeUpdateOne) Save(ctx context.Context) (*Roomtype, error) {
	if v, ok := ruo.mutation.TYPEDEATAIL(); ok {
		if err := roomtype.TYPEDEATAILValidator(v); err != nil {
			return nil, &ValidationError{Name: "TYPEDEATAIL", err: fmt.Errorf("ent: validator failed for field \"TYPEDEATAIL\": %w", err)}
		}
	}

	var (
		err  error
		node *Roomtype
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomtypeUpdateOne) SaveX(ctx context.Context) *Roomtype {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RoomtypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomtypeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoomtypeUpdateOne) sqlSave(ctx context.Context) (r *Roomtype, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomtype.Table,
			Columns: roomtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomtype.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Roomtype.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.ROOMPRICE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomtype.FieldROOMPRICE,
		})
	}
	if value, ok := ruo.mutation.AddedROOMPRICE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomtype.FieldROOMPRICE,
		})
	}
	if value, ok := ruo.mutation.TYPEDEATAIL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomtype.FieldTYPEDEATAIL,
		})
	}
	if nodes := ruo.mutation.RemovedRoom1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomtype.Room1Table,
			Columns: []string{roomtype.Room1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.Room1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomtype.Room1Table,
			Columns: []string{roomtype.Room1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Roomtype{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
