// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/PBank/app/ent/migrate"

	"github.com/PBank/app/ent/promotion"
	"github.com/PBank/app/ent/room"
	"github.com/PBank/app/ent/roomstate"
	"github.com/PBank/app/ent/roomtype"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Promotion is the client for interacting with the Promotion builders.
	Promotion *PromotionClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// Roomstate is the client for interacting with the Roomstate builders.
	Roomstate *RoomstateClient
	// Roomtype is the client for interacting with the Roomtype builders.
	Roomtype *RoomtypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Promotion = NewPromotionClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.Roomstate = NewRoomstateClient(c.config)
	c.Roomtype = NewRoomtypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Promotion: NewPromotionClient(cfg),
		Room:      NewRoomClient(cfg),
		Roomstate: NewRoomstateClient(cfg),
		Roomtype:  NewRoomtypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:    cfg,
		Promotion: NewPromotionClient(cfg),
		Room:      NewRoomClient(cfg),
		Roomstate: NewRoomstateClient(cfg),
		Roomtype:  NewRoomtypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Promotion.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Promotion.Use(hooks...)
	c.Room.Use(hooks...)
	c.Roomstate.Use(hooks...)
	c.Roomtype.Use(hooks...)
}

// PromotionClient is a client for the Promotion schema.
type PromotionClient struct {
	config
}

// NewPromotionClient returns a client for the Promotion from the given config.
func NewPromotionClient(c config) *PromotionClient {
	return &PromotionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotion.Hooks(f(g(h())))`.
func (c *PromotionClient) Use(hooks ...Hook) {
	c.hooks.Promotion = append(c.hooks.Promotion, hooks...)
}

// Create returns a create builder for Promotion.
func (c *PromotionClient) Create() *PromotionCreate {
	mutation := newPromotionMutation(c.config, OpCreate)
	return &PromotionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Promotion.
func (c *PromotionClient) Update() *PromotionUpdate {
	mutation := newPromotionMutation(c.config, OpUpdate)
	return &PromotionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionClient) UpdateOne(pr *Promotion) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotion(pr))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionClient) UpdateOneID(id int) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotionID(id))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotion.
func (c *PromotionClient) Delete() *PromotionDelete {
	mutation := newPromotionMutation(c.config, OpDelete)
	return &PromotionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PromotionClient) DeleteOne(pr *Promotion) *PromotionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PromotionClient) DeleteOneID(id int) *PromotionDeleteOne {
	builder := c.Delete().Where(promotion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionDeleteOne{builder}
}

// Create returns a query builder for Promotion.
func (c *PromotionClient) Query() *PromotionQuery {
	return &PromotionQuery{config: c.config}
}

// Get returns a Promotion entity by its id.
func (c *PromotionClient) Get(ctx context.Context, id int) (*Promotion, error) {
	return c.Query().Where(promotion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionClient) GetX(ctx context.Context, id int) *Promotion {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryRoom2 queries the Room2 edge of a Promotion.
func (c *PromotionClient) QueryRoom2(pr *Promotion) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotion.Room2Table, promotion.Room2Column),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionClient) Hooks() []Hook {
	return c.hooks.Promotion
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoomtype queries the Roomtype edge of a Room.
func (c *RoomClient) QueryRoomtype(r *Room) *RoomtypeQuery {
	query := &RoomtypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomtype.Table, roomtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoomtypeTable, room.RoomtypeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPromotion queries the Promotion edge of a Room.
func (c *RoomClient) QueryPromotion(r *Room) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.PromotionTable, room.PromotionColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomstate queries the roomstate edge of a Room.
func (c *RoomClient) QueryRoomstate(r *Room) *RoomstateQuery {
	query := &RoomstateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomstate.Table, roomstate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoomstateTable, room.RoomstateColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// RoomstateClient is a client for the Roomstate schema.
type RoomstateClient struct {
	config
}

// NewRoomstateClient returns a client for the Roomstate from the given config.
func NewRoomstateClient(c config) *RoomstateClient {
	return &RoomstateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomstate.Hooks(f(g(h())))`.
func (c *RoomstateClient) Use(hooks ...Hook) {
	c.hooks.Roomstate = append(c.hooks.Roomstate, hooks...)
}

// Create returns a create builder for Roomstate.
func (c *RoomstateClient) Create() *RoomstateCreate {
	mutation := newRoomstateMutation(c.config, OpCreate)
	return &RoomstateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roomstate.
func (c *RoomstateClient) Update() *RoomstateUpdate {
	mutation := newRoomstateMutation(c.config, OpUpdate)
	return &RoomstateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomstateClient) UpdateOne(r *Roomstate) *RoomstateUpdateOne {
	mutation := newRoomstateMutation(c.config, OpUpdateOne, withRoomstate(r))
	return &RoomstateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomstateClient) UpdateOneID(id int) *RoomstateUpdateOne {
	mutation := newRoomstateMutation(c.config, OpUpdateOne, withRoomstateID(id))
	return &RoomstateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roomstate.
func (c *RoomstateClient) Delete() *RoomstateDelete {
	mutation := newRoomstateMutation(c.config, OpDelete)
	return &RoomstateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomstateClient) DeleteOne(r *Roomstate) *RoomstateDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomstateClient) DeleteOneID(id int) *RoomstateDeleteOne {
	builder := c.Delete().Where(roomstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomstateDeleteOne{builder}
}

// Create returns a query builder for Roomstate.
func (c *RoomstateClient) Query() *RoomstateQuery {
	return &RoomstateQuery{config: c.config}
}

// Get returns a Roomstate entity by its id.
func (c *RoomstateClient) Get(ctx context.Context, id int) (*Roomstate, error) {
	return c.Query().Where(roomstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomstateClient) GetX(ctx context.Context, id int) *Roomstate {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoom3 queries the Room3 edge of a Roomstate.
func (c *RoomstateClient) QueryRoom3(r *Roomstate) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomstate.Table, roomstate.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomstate.Room3Table, roomstate.Room3Column),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomstateClient) Hooks() []Hook {
	return c.hooks.Roomstate
}

// RoomtypeClient is a client for the Roomtype schema.
type RoomtypeClient struct {
	config
}

// NewRoomtypeClient returns a client for the Roomtype from the given config.
func NewRoomtypeClient(c config) *RoomtypeClient {
	return &RoomtypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomtype.Hooks(f(g(h())))`.
func (c *RoomtypeClient) Use(hooks ...Hook) {
	c.hooks.Roomtype = append(c.hooks.Roomtype, hooks...)
}

// Create returns a create builder for Roomtype.
func (c *RoomtypeClient) Create() *RoomtypeCreate {
	mutation := newRoomtypeMutation(c.config, OpCreate)
	return &RoomtypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roomtype.
func (c *RoomtypeClient) Update() *RoomtypeUpdate {
	mutation := newRoomtypeMutation(c.config, OpUpdate)
	return &RoomtypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomtypeClient) UpdateOne(r *Roomtype) *RoomtypeUpdateOne {
	mutation := newRoomtypeMutation(c.config, OpUpdateOne, withRoomtype(r))
	return &RoomtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomtypeClient) UpdateOneID(id int) *RoomtypeUpdateOne {
	mutation := newRoomtypeMutation(c.config, OpUpdateOne, withRoomtypeID(id))
	return &RoomtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roomtype.
func (c *RoomtypeClient) Delete() *RoomtypeDelete {
	mutation := newRoomtypeMutation(c.config, OpDelete)
	return &RoomtypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomtypeClient) DeleteOne(r *Roomtype) *RoomtypeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomtypeClient) DeleteOneID(id int) *RoomtypeDeleteOne {
	builder := c.Delete().Where(roomtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomtypeDeleteOne{builder}
}

// Create returns a query builder for Roomtype.
func (c *RoomtypeClient) Query() *RoomtypeQuery {
	return &RoomtypeQuery{config: c.config}
}

// Get returns a Roomtype entity by its id.
func (c *RoomtypeClient) Get(ctx context.Context, id int) (*Roomtype, error) {
	return c.Query().Where(roomtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomtypeClient) GetX(ctx context.Context, id int) *Roomtype {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoom1 queries the Room1 edge of a Roomtype.
func (c *RoomtypeClient) QueryRoom1(r *Roomtype) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomtype.Table, roomtype.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomtype.Room1Table, roomtype.Room1Column),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomtypeClient) Hooks() []Hook {
	return c.hooks.Roomtype
}
