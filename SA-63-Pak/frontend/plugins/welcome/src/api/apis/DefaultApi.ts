/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersRoom,
    ControllersRoomFromJSON,
    ControllersRoomToJSON,
    EntPromotion,
    EntPromotionFromJSON,
    EntPromotionToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntRoomstate,
    EntRoomstateFromJSON,
    EntRoomstateToJSON,
    EntRoomtype,
    EntRoomtypeFromJSON,
    EntRoomtypeToJSON,
} from '../models';

export interface CreatePromotionRequest {
    promotion: EntPromotion;
}

export interface CreateRoomRequest {
    room: ControllersRoom;
}

export interface CreateRoomstateRequest {
    roomstate: EntRoomstate;
}

export interface CreateRoomtypeRequest {
    roomtype: EntRoomtype;
}

export interface GetPromotionRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetRoomstateRequest {
    id: number;
}

export interface GetRoomtypeRequest {
    id: number;
}

export interface ListPromotionRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomstateRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomtypeRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateRoomRequest {
    id: number;
    room: EntRoom;
}

export interface UpdateRoomstateRequest {
    id: number;
    roomstate: EntRoomstate;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotionRaw(requestParameters: CreatePromotionRequest): Promise<runtime.ApiResponse<EntPromotion>> {
        if (requestParameters.promotion === null || requestParameters.promotion === undefined) {
            throw new runtime.RequiredError('promotion','Required parameter requestParameters.promotion was null or undefined when calling createPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/promotions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPromotionToJSON(requestParameters.promotion),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotionFromJSON(jsonValue));
    }

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotion(requestParameters: CreatePromotionRequest): Promise<EntPromotion> {
        const response = await this.createPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomstate
     * Create roomstate
     */
    async createRoomstateRaw(requestParameters: CreateRoomstateRequest): Promise<runtime.ApiResponse<EntRoomstate>> {
        if (requestParameters.roomstate === null || requestParameters.roomstate === undefined) {
            throw new runtime.RequiredError('roomstate','Required parameter requestParameters.roomstate was null or undefined when calling createRoomstate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomstates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomstateToJSON(requestParameters.roomstate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomstateFromJSON(jsonValue));
    }

    /**
     * Create roomstate
     * Create roomstate
     */
    async createRoomstate(requestParameters: CreateRoomstateRequest): Promise<EntRoomstate> {
        const response = await this.createRoomstateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtypeRaw(requestParameters: CreateRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomtype>> {
        if (requestParameters.roomtype === null || requestParameters.roomtype === undefined) {
            throw new runtime.RequiredError('roomtype','Required parameter requestParameters.roomtype was null or undefined when calling createRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomtypeToJSON(requestParameters.roomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomtypeFromJSON(jsonValue));
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtype(requestParameters: CreateRoomtypeRequest): Promise<EntRoomtype> {
        const response = await this.createRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotionRaw(requestParameters: GetPromotionRequest): Promise<runtime.ApiResponse<EntPromotion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotionFromJSON(jsonValue));
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotion(requestParameters: GetPromotionRequest): Promise<EntPromotion> {
        const response = await this.getPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomstate by ID
     * Get a roomstate entity by ID
     */
    async getRoomstateRaw(requestParameters: GetRoomstateRequest): Promise<runtime.ApiResponse<EntRoomstate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomstate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomstates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomstateFromJSON(jsonValue));
    }

    /**
     * get roomstate by ID
     * Get a roomstate entity by ID
     */
    async getRoomstate(requestParameters: GetRoomstateRequest): Promise<EntRoomstate> {
        const response = await this.getRoomstateRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtypeRaw(requestParameters: GetRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomtypeFromJSON(jsonValue));
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtype(requestParameters: GetRoomtypeRequest): Promise<EntRoomtype> {
        const response = await this.getRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotionRaw(requestParameters: ListPromotionRequest): Promise<runtime.ApiResponse<Array<EntPromotion>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPromotionFromJSON));
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotion(requestParameters: ListPromotionRequest): Promise<Array<EntPromotion>> {
        const response = await this.listPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomstate entities
     * List roomstate entities
     */
    async listRoomstateRaw(requestParameters: ListRoomstateRequest): Promise<runtime.ApiResponse<Array<EntRoomstate>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomstates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomstateFromJSON));
    }

    /**
     * list roomstate entities
     * List roomstate entities
     */
    async listRoomstate(requestParameters: ListRoomstateRequest): Promise<Array<EntRoomstate>> {
        const response = await this.listRoomstateRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtypeRaw(requestParameters: ListRoomtypeRequest): Promise<runtime.ApiResponse<Array<EntRoomtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomtypeFromJSON));
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtype(requestParameters: ListRoomtypeRequest): Promise<Array<EntRoomtype>> {
        const response = await this.listRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoomRaw(requestParameters: UpdateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoom.');
        }

        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling updateRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoom(requestParameters: UpdateRoomRequest): Promise<EntRoom> {
        const response = await this.updateRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roomstate by ID
     * Update a roomstate entity by ID
     */
    async updateRoomstateRaw(requestParameters: UpdateRoomstateRequest): Promise<runtime.ApiResponse<EntRoomstate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoomstate.');
        }

        if (requestParameters.roomstate === null || requestParameters.roomstate === undefined) {
            throw new runtime.RequiredError('roomstate','Required parameter requestParameters.roomstate was null or undefined when calling updateRoomstate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomstates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomstateToJSON(requestParameters.roomstate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomstateFromJSON(jsonValue));
    }

    /**
     * update roomstate by ID
     * Update a roomstate entity by ID
     */
    async updateRoomstate(requestParameters: UpdateRoomstateRequest): Promise<EntRoomstate> {
        const response = await this.updateRoomstateRaw(requestParameters);
        return await response.value();
    }

}
