/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersPayment,
    ControllersPaymentFromJSON,
    ControllersPaymentToJSON,
    EntCustomer,
    EntCustomerFromJSON,
    EntCustomerToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntPayment,
    EntPaymentFromJSON,
    EntPaymentToJSON,
    EntPaymenttype,
    EntPaymenttypeFromJSON,
    EntPaymenttypeToJSON,
    EntRoomtype,
    EntRoomtypeFromJSON,
    EntRoomtypeToJSON,
} from '../models';

export interface CreateCustomerRequest {
    customer: EntCustomer;
}

export interface CreateEmployeeRequest {
    employee: EntEmployee;
}

export interface CreatePaymentRequest {
    payment: EntPayment;
}

export interface CreatePaymenttypeRequest {
    paymenttype: EntPaymenttype;
}

export interface CreateRoomtypeRequest {
    roomtype: EntRoomtype;
}

export interface GetCustomerRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetPaymentRequest {
    id: number;
}

export interface GetPaymenttypeRequest {
    id: number;
}

export interface GetRoomtypeRequest {
    id: number;
}

export interface ListCustomerRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymenttypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomtypeRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create customer
     * Create customer
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling createCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCustomerToJSON(requestParameters.customer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<EntCustomer> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create payment
     * Create payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling createPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * Create payment
     * Create payment
     */
    async createPayment(requestParameters: CreatePaymentRequest): Promise<EntPayment> {
        const response = await this.createPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create paymenttype
     * Create paymenttype
     */
    async createPaymenttypeRaw(requestParameters: CreatePaymenttypeRequest): Promise<runtime.ApiResponse<EntPaymenttype>> {
        if (requestParameters.paymenttype === null || requestParameters.paymenttype === undefined) {
            throw new runtime.RequiredError('paymenttype','Required parameter requestParameters.paymenttype was null or undefined when calling createPaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paymenttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymenttypeToJSON(requestParameters.paymenttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymenttypeFromJSON(jsonValue));
    }

    /**
     * Create paymenttype
     * Create paymenttype
     */
    async createPaymenttype(requestParameters: CreatePaymenttypeRequest): Promise<EntPaymenttype> {
        const response = await this.createPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtypeRaw(requestParameters: CreateRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomtype>> {
        if (requestParameters.roomtype === null || requestParameters.roomtype === undefined) {
            throw new runtime.RequiredError('roomtype','Required parameter requestParameters.roomtype was null or undefined when calling createRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomtypeToJSON(requestParameters.roomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomtypeFromJSON(jsonValue));
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtype(requestParameters: CreateRoomtypeRequest): Promise<EntRoomtype> {
        const response = await this.createRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<EntCustomer> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPaymentRaw(requestParameters: GetPaymentRequest): Promise<runtime.ApiResponse<ControllersPayment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPaymentFromJSON(jsonValue));
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPayment(requestParameters: GetPaymentRequest): Promise<ControllersPayment> {
        const response = await this.getPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paymenttype by ID
     * Get a paymenttype entity by ID
     */
    async getPaymenttypeRaw(requestParameters: GetPaymenttypeRequest): Promise<runtime.ApiResponse<EntPaymenttype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymenttypeFromJSON(jsonValue));
    }

    /**
     * get paymenttype by ID
     * Get a paymenttype entity by ID
     */
    async getPaymenttype(requestParameters: GetPaymenttypeRequest): Promise<EntPaymenttype> {
        const response = await this.getPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtypeRaw(requestParameters: GetRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomtypeFromJSON(jsonValue));
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtype(requestParameters: GetRoomtypeRequest): Promise<EntRoomtype> {
        const response = await this.getRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomerRaw(requestParameters: ListCustomerRequest): Promise<runtime.ApiResponse<Array<EntCustomer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCustomerFromJSON));
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomer(requestParameters: ListCustomerRequest): Promise<Array<EntCustomer>> {
        const response = await this.listCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPaymentRaw(requestParameters: ListPaymentRequest): Promise<runtime.ApiResponse<Array<EntPayment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentFromJSON));
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPayment(requestParameters: ListPaymentRequest): Promise<Array<EntPayment>> {
        const response = await this.listPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list paymenttype entities
     * List paymenttype entities
     */
    async listPaymenttypeRaw(requestParameters: ListPaymenttypeRequest): Promise<runtime.ApiResponse<Array<EntPaymenttype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymenttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymenttypeFromJSON));
    }

    /**
     * list paymenttype entities
     * List paymenttype entities
     */
    async listPaymenttype(requestParameters: ListPaymenttypeRequest): Promise<Array<EntPaymenttype>> {
        const response = await this.listPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtypeRaw(requestParameters: ListRoomtypeRequest): Promise<runtime.ApiResponse<Array<EntRoomtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomtypeFromJSON));
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtype(requestParameters: ListRoomtypeRequest): Promise<Array<EntRoomtype>> {
        const response = await this.listRoomtypeRaw(requestParameters);
        return await response.value();
    }

}
